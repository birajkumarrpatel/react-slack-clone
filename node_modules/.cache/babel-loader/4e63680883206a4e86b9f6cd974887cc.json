{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BIRAJ\\\\Desktop\\\\react-slack-clone\\\\src\\\\components\\\\SidePanel\\\\Starred.js\";\nimport React from \"react\";\nimport firebase from \"../../firebase\";\nimport { connect } from \"react-redux\";\nimport { setCurrentChannel, setPrivateChannel } from \"../../actions\";\nimport { Menu, Icon } from \"semantic-ui-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Starred extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      user: this.props.currentUser,\n      usersRef: firebase.database().ref(\"users\"),\n      activeChannel: \"\",\n      starredChannels: []\n    };\n\n    this.removeListener = () => {\n      this.state.usersRef.child(`${this.state.user.uid}/starred`).off();\n    };\n\n    this.addListeners = userId => {\n      this.state.usersRef.child(userId).child(\"starred\").on(\"child_added\", snap => {\n        const starredChannel = {\n          id: snap.key,\n          ...snap.val()\n        };\n        this.setState({\n          starredChannels: [...this.state.starredChannels, starredChannel]\n        });\n      });\n      this.state.usersRef.child(userId).child(\"starred\").on(\"child_removed\", snap => {\n        const channelToRemove = {\n          id: snap.key,\n          ...snap.val()\n        };\n        const filteredChannels = this.state.starredChannels.filter(channel => {\n          return channel.id !== channelToRemove.id;\n        });\n        this.setState({\n          starredChannels: filteredChannels\n        });\n      });\n    };\n\n    this.setActiveChannel = channel => {\n      this.setState({\n        activeChannel: channel.id\n      });\n    };\n\n    this.changeChannel = channel => {\n      this.setActiveChannel(channel);\n      this.props.setCurrentChannel(channel);\n      this.props.setPrivateChannel(false);\n    };\n\n    this.displayChannels = starredChannels => starredChannels.length > 0 && starredChannels.map(channel => /*#__PURE__*/_jsxDEV(Menu.Item, {\n      onClick: () => this.changeChannel(channel),\n      name: channel.name,\n      style: {\n        opacity: 0.7\n      },\n      active: channel.id === this.state.activeChannel,\n      children: [\"# \", channel.name]\n    }, channel.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this));\n  }\n\n  componentDidMount() {\n    if (this.state.user) {\n      this.addListeners(this.state.user.uid);\n    }\n  }\n\n  componentWillUnmount() {\n    this.removeListener();\n  }\n\n  render() {\n    const {\n      starredChannels,\n      modal\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Menu.Menu, {\n      className: \"menu\",\n      children: [/*#__PURE__*/_jsxDEV(Menu.Item, {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(Icon, {\n            name: \"star\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 21\n          }, this), \" STARRED\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }, this), \" \", \"(\", starredChannels.length, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), this.displayChannels(starredChannels)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default connect(null, {\n  setCurrentChannel,\n  setPrivateChannel\n})(Starred);","map":{"version":3,"sources":["C:/Users/BIRAJ/Desktop/react-slack-clone/src/components/SidePanel/Starred.js"],"names":["React","firebase","connect","setCurrentChannel","setPrivateChannel","Menu","Icon","Starred","Component","state","user","props","currentUser","usersRef","database","ref","activeChannel","starredChannels","removeListener","child","uid","off","addListeners","userId","on","snap","starredChannel","id","key","val","setState","channelToRemove","filteredChannels","filter","channel","setActiveChannel","changeChannel","displayChannels","length","map","name","opacity","componentDidMount","componentWillUnmount","render","modal"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport firebase from \"../../firebase\";\r\nimport { connect } from \"react-redux\";\r\nimport { setCurrentChannel, setPrivateChannel } from \"../../actions\";\r\nimport { Menu, Icon } from \"semantic-ui-react\";\r\n\r\nclass Starred extends React.Component {\r\n    state = {\r\n        user: this.props.currentUser,\r\n        usersRef: firebase.database().ref(\"users\"),\r\n        activeChannel:\"\",\r\n        starredChannels: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        if(this.state.user) {\r\n            this.addListeners(this.state.user.uid);\r\n        }    \r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this.removeListener();\r\n    }\r\n\r\n    removeListener = () => {\r\n        this.state.usersRef.child(`${this.state.user.uid}/starred`).off();\r\n    }\r\n\r\n    addListeners = userId => {\r\n        this.state.usersRef\r\n        .child(userId)\r\n        .child(\"starred\")\r\n        .on(\"child_added\", snap => {\r\n            const starredChannel = { id: snap.key, ...snap.val() };\r\n            this.setState ({\r\n                starredChannels: [...this.state.starredChannels, starredChannel]\r\n            });\r\n        });\r\n    this.state.usersRef\r\n        .child(userId)\r\n        .child(\"starred\")\r\n        .on (\"child_removed\", snap => {\r\n            const channelToRemove = { id: snap.key, ...snap.val()};\r\n            const filteredChannels = this.state.starredChannels.filter(channel => {\r\n                return channel.id !== channelToRemove.id;\r\n            });\r\n            this.setState({ starredChannels: filteredChannels});\r\n        });\r\n    }\r\n\r\n    setActiveChannel = channel => {\r\n        this.setState({ activeChannel: channel.id });\r\n    };\r\n\r\n    changeChannel = channel => {\r\n        this.setActiveChannel(channel);\r\n        this.props.setCurrentChannel(channel);\r\n        this.props.setPrivateChannel(false);\r\n    };\r\n\r\n    displayChannels = starredChannels =>\r\n    starredChannels.length > 0 &&\r\n    starredChannels.map(channel => (\r\n      <Menu.Item\r\n        key={channel.id}\r\n        onClick={() => this.changeChannel(channel)}\r\n        name={channel.name}\r\n        style={{ opacity: 0.7 }}\r\n        active={channel.id === this.state.activeChannel}\r\n      >\r\n        # {channel.name}\r\n      </Menu.Item>\r\n    ));\r\n\r\n    render() {\r\n        const { starredChannels, modal } =  this.state;\r\n\r\n        return(\r\n            <Menu.Menu className=\"menu\">\r\n                <Menu.Item>\r\n                <span>\r\n                    <Icon name=\"star\" /> STARRED\r\n                </span>{\" \"}\r\n                ({starredChannels.length}) \r\n                </Menu.Item>\r\n                {this.displayChannels(starredChannels)}\r\n            </Menu.Menu>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    null,\r\n    { setCurrentChannel, setPrivateChannel }\r\n)(Starred);"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BIRAJ\\\\Desktop\\\\react-slack-clone\\\\src\\\\components\\\\Messages\\\\Messages.js\";\nimport React from \"react\";\nimport { Segment, Comment } from \"semantic-ui-react\";\nimport firebase from \"../../firebase\";\nimport MessagesHeader from \"./MessagesHeader\";\nimport MessageForm from \"./MessageForm\";\nimport Message from \"./Message\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Messages extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      privateChannel: this.props.isPrivateChannel,\n      privateMessagesRef: firebase.database().ref(\"privateMessages\"),\n      messagesRef: firebase.database().ref(\"messages\"),\n      messages: [],\n      messagesLoading: true,\n      channel: this.props.currentChannel,\n      user: this.props.currentUser,\n      numUniqueUsers: \"\",\n      searchTerm: \"\",\n      searchLoading: false,\n      searchResults: []\n    };\n\n    this.addListeners = channelId => {\n      this.addMessageListener(channelId);\n    };\n\n    this.addMessageListener = channelId => {\n      let loadedMessages = [];\n      const ref = this.getMessagesRef();\n      ref.child(channelId).on(\"child_added\", snap => {\n        loadedMessages.push(snap.val());\n        this.setState({\n          messages: loadedMessages,\n          messagesLoading: false\n        });\n        this.countUniqueUsers(loadedMessages);\n      });\n    };\n\n    this.getMessagesRef = () => {\n      const {\n        messagesRef,\n        privateMessagesRef,\n        privateChannel\n      } = this.state;\n      return privateChannel ? privateMessagesRef : messagesRef;\n    };\n\n    this.handleSearchChange = event => {\n      this.setState({\n        searchTerm: event.target.value,\n        searchLoading: true\n      }, () => this.handleSearchMessages());\n    };\n\n    this.handleSearchMessages = () => {\n      const channelMessages = [...this.state.messages];\n      const regex = new RegExp(this.state.searchTerm, \"gi\");\n      const searchResults = channelMessages.reduce((acc, message) => {\n        if (message.content && message.content.match(regex) || message.user.name.match(regex)) {\n          acc.push(message);\n        }\n\n        return acc;\n      }, []);\n      this.setState({\n        searchResults\n      });\n      setTimeout(() => this.setState({\n        searchLoading: false\n      }), 1000);\n    };\n\n    this.countUniqueUsers = messages => {\n      const uniqueUsers = messages.reduce((acc, message) => {\n        if (!acc.includes(message.user.name)) {\n          acc.push(message.user.name);\n        }\n\n        return acc;\n      }, []);\n      const plural = uniqueUsers.length > 1 || uniqueUsers.length === 0;\n      const numUniqueUsers = `${uniqueUsers.length} user${plural ? \"s\" : \"\"}`;\n      this.setState({\n        numUniqueUsers\n      });\n    };\n\n    this.displayMessages = messages => messages.length > 0 && messages.map(message => /*#__PURE__*/_jsxDEV(Message, {\n      message: message,\n      user: this.state.user\n    }, message.timestamp, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this));\n\n    this.displayChannelName = channel => {\n      return channel ? `${this.state.privateChannel ? \"@\" : \"#\"}${channel.name}` : \"\";\n    };\n  }\n\n  componentDidMount() {\n    const {\n      channel,\n      user\n    } = this.state;\n\n    if (channel && user) {\n      this.addListeners(channel.id);\n    }\n  }\n\n  render() {\n    // prettier-ignore\n    const {\n      messagesRef,\n      messages,\n      channel,\n      user,\n      numUniqueUsers,\n      searchTerm,\n      searchResults,\n      searchLoading,\n      privateChannel\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MessagesHeader, {\n        channelName: this.displayChannelName(channel),\n        numUniqueUsers: numUniqueUsers,\n        handleSearchChange: this.handleSearchChange,\n        searchLoading: searchLoading,\n        isPrivateChannel: privateChannel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Segment, {\n        children: /*#__PURE__*/_jsxDEV(Comment.Group, {\n          className: \"messages\",\n          children: searchTerm ? this.displayMessages(searchResults) : this.displayMessages(messages)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageForm, {\n        messagesRef: messagesRef,\n        currentChannel: channel,\n        currentUser: user,\n        isPrivateChannel: privateChannel,\n        getMessagesRef: this.getMessagesRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Messages;","map":{"version":3,"sources":["C:/Users/BIRAJ/Desktop/react-slack-clone/src/components/Messages/Messages.js"],"names":["React","Segment","Comment","firebase","MessagesHeader","MessageForm","Message","Messages","Component","state","privateChannel","props","isPrivateChannel","privateMessagesRef","database","ref","messagesRef","messages","messagesLoading","channel","currentChannel","user","currentUser","numUniqueUsers","searchTerm","searchLoading","searchResults","addListeners","channelId","addMessageListener","loadedMessages","getMessagesRef","child","on","snap","push","val","setState","countUniqueUsers","handleSearchChange","event","target","value","handleSearchMessages","channelMessages","regex","RegExp","reduce","acc","message","content","match","name","setTimeout","uniqueUsers","includes","plural","length","displayMessages","map","timestamp","displayChannelName","componentDidMount","id","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Segment, Comment } from \"semantic-ui-react\";\nimport firebase from \"../../firebase\";\n\nimport MessagesHeader from \"./MessagesHeader\";\nimport MessageForm from \"./MessageForm\";\nimport Message from \"./Message\";\n\nclass Messages extends React.Component {\n  state = {\n    privateChannel: this.props.isPrivateChannel,\n    privateMessagesRef: firebase.database().ref(\"privateMessages\"),\n    messagesRef: firebase.database().ref(\"messages\"),\n    messages: [],\n    messagesLoading: true,\n    channel: this.props.currentChannel,\n    user: this.props.currentUser,\n    numUniqueUsers: \"\",\n    searchTerm: \"\",\n    searchLoading: false,\n    searchResults: []\n  };\n\n  componentDidMount() {\n    const { channel, user } = this.state;\n\n    if (channel && user) {\n      this.addListeners(channel.id);\n    }\n  }\n\n  addListeners = channelId => {\n    this.addMessageListener(channelId);\n  };\n\n  addMessageListener = channelId => {\n    let loadedMessages = [];\n    const ref = this.getMessagesRef();\n    ref.child(channelId).on(\"child_added\", snap => {\n      loadedMessages.push(snap.val());\n      this.setState({\n        messages: loadedMessages,\n        messagesLoading: false\n      });\n      this.countUniqueUsers(loadedMessages);\n    });\n  };\n\n  getMessagesRef = () => {\n    const { messagesRef, privateMessagesRef, privateChannel } = this.state;\n    return privateChannel ? privateMessagesRef : messagesRef;\n  };\n\n  handleSearchChange = event => {\n    this.setState(\n      {\n        searchTerm: event.target.value,\n        searchLoading: true\n      },\n      () => this.handleSearchMessages()\n    );\n  };\n\n  handleSearchMessages = () => {\n    const channelMessages = [...this.state.messages];\n    const regex = new RegExp(this.state.searchTerm, \"gi\");\n    const searchResults = channelMessages.reduce((acc, message) => {\n      if (\n        (message.content && message.content.match(regex)) ||\n        message.user.name.match(regex)\n      ) {\n        acc.push(message);\n      }\n      return acc;\n    }, []);\n    this.setState({ searchResults });\n    setTimeout(() => this.setState({ searchLoading: false }), 1000);\n  };\n\n  countUniqueUsers = messages => {\n    const uniqueUsers = messages.reduce((acc, message) => {\n      if (!acc.includes(message.user.name)) {\n        acc.push(message.user.name);\n      }\n      return acc;\n    }, []);\n    const plural = uniqueUsers.length > 1 || uniqueUsers.length === 0;\n    const numUniqueUsers = `${uniqueUsers.length} user${plural ? \"s\" : \"\"}`;\n    this.setState({ numUniqueUsers });\n  };\n\n  displayMessages = messages =>\n    messages.length > 0 &&\n    messages.map(message => (\n      <Message\n        key={message.timestamp}\n        message={message}\n        user={this.state.user}\n      />\n    ));\n\n  displayChannelName = channel => {\n    return channel\n      ? `${this.state.privateChannel ? \"@\" : \"#\"}${channel.name}`\n      : \"\";\n  };\n\n  render() {\n    // prettier-ignore\n    const { messagesRef, messages, channel, user, numUniqueUsers, searchTerm, searchResults, searchLoading, privateChannel } = this.state;\n\n    return (\n      <React.Fragment>\n        <MessagesHeader\n          channelName={this.displayChannelName(channel)}\n          numUniqueUsers={numUniqueUsers}\n          handleSearchChange={this.handleSearchChange}\n          searchLoading={searchLoading}\n          isPrivateChannel={privateChannel}\n        />\n\n        <Segment>\n          <Comment.Group className=\"messages\">\n            {searchTerm\n              ? this.displayMessages(searchResults)\n              : this.displayMessages(messages)}\n          </Comment.Group>\n        </Segment>\n\n        <MessageForm\n          messagesRef={messagesRef}\n          currentChannel={channel}\n          currentUser={user}\n          isPrivateChannel={privateChannel}\n          getMessagesRef={this.getMessagesRef}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Messages;\n"]},"metadata":{},"sourceType":"module"}
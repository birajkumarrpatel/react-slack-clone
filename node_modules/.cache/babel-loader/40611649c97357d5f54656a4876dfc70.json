{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport EventSet from './EventSet';\n\nvar EventPool = /*#__PURE__*/function () {\n  /**\n   * @param {String} poolName\n   * @param {String} eventType\n   * @param {Function[]} eventHandlers\n   * @return {EventPool}\n   */\n\n  /**\n   * @param {String} poolName\n   * @param {Map<String,EventSet>} handlerSets\n   */\n  function EventPool(poolName, handlerSets) {\n    _classCallCheck(this, EventPool);\n    /** @private */\n\n\n    this.handlerSets = handlerSets;\n    /** @private */\n\n    this.poolName = poolName;\n  }\n  /**\n   * @param {String} eventType\n   * @param {Function[]} eventHandlers\n   * @return {EventPool}\n   */\n\n\n  _createClass(EventPool, [{\n    key: \"addHandlers\",\n    value: function addHandlers(eventType, eventHandlers) {\n      var handlerSets = new Map(this.handlerSets);\n\n      if (handlerSets.has(eventType)) {\n        handlerSets.set(eventType, handlerSets.get(eventType).addHandlers(eventHandlers));\n      } else {\n        handlerSets.set(eventType, new EventSet(eventHandlers));\n      }\n\n      return new EventPool(this.poolName, handlerSets);\n    }\n    /**\n     * @param {String} eventType\n     * @param {Event} event\n     */\n\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(eventType, event) {\n      var handlerSet = this.handlerSets.get(eventType);\n      if (handlerSet) handlerSet.dispatchEvent(event, this.poolName === 'default');\n    }\n    /**\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"hasHandlers\",\n    value: function hasHandlers() {\n      return this.handlerSets.size > 0;\n    }\n    /**\n     * @param {String} eventType\n     * @param {Function[]} eventHandlers\n     * @return {EventPool}\n     */\n\n  }, {\n    key: \"removeHandlers\",\n    value: function removeHandlers(eventType, eventHandlers) {\n      var handlerSets = new Map(this.handlerSets);\n\n      if (!handlerSets.has(eventType)) {\n        return new EventPool(this.poolName, handlerSets);\n      }\n\n      var handlerSet = handlerSets.get(eventType).removeHandlers(eventHandlers);\n\n      if (handlerSet.hasHandlers()) {\n        handlerSets.set(eventType, handlerSet);\n      } else {\n        handlerSets.delete(eventType);\n      }\n\n      return new EventPool(this.poolName, handlerSets);\n    }\n  }]);\n\n  return EventPool;\n}();\n\n_defineProperty(EventPool, \"createByType\", function (poolName, eventType, eventHandlers) {\n  var handlerSets = new Map();\n  handlerSets.set(eventType, new EventSet(eventHandlers));\n  return new EventPool(poolName, handlerSets);\n});\n\nexport { EventPool as default };","map":{"version":3,"sources":["C:/Users/BIRAJ/Desktop/react-slack-clone/node_modules/semantic-ui-react/dist/es/lib/eventStack/EventPool.js"],"names":["_classCallCheck","_createClass","_defineProperty","EventSet","EventPool","poolName","handlerSets","key","value","addHandlers","eventType","eventHandlers","Map","has","set","get","dispatchEvent","event","handlerSet","hasHandlers","size","removeHandlers","delete","default"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,uCAA5B;AACA,OAAOC,YAAP,MAAyB,oCAAzB;AACA,OAAOC,eAAP,MAA4B,uCAA5B;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,IAAIC,SAAS,GACb,aACA,YAAY;AACV;AACF;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACE,WAASA,SAAT,CAAmBC,QAAnB,EAA6BC,WAA7B,EAA0C;AACxCN,IAAAA,eAAe,CAAC,IAAD,EAAOI,SAAP,CAAf;AAEA;;;AACA,SAAKE,WAAL,GAAmBA,WAAnB;AACA;;AAEA,SAAKD,QAAL,GAAgBA,QAAhB;AACD;AACD;AACF;AACA;AACA;AACA;;;AAGEJ,EAAAA,YAAY,CAACG,SAAD,EAAY,CAAC;AACvBG,IAAAA,GAAG,EAAE,aADkB;AAEvBC,IAAAA,KAAK,EAAE,SAASC,WAAT,CAAqBC,SAArB,EAAgCC,aAAhC,EAA+C;AACpD,UAAIL,WAAW,GAAG,IAAIM,GAAJ,CAAQ,KAAKN,WAAb,CAAlB;;AAEA,UAAIA,WAAW,CAACO,GAAZ,CAAgBH,SAAhB,CAAJ,EAAgC;AAC9BJ,QAAAA,WAAW,CAACQ,GAAZ,CAAgBJ,SAAhB,EAA2BJ,WAAW,CAACS,GAAZ,CAAgBL,SAAhB,EAA2BD,WAA3B,CAAuCE,aAAvC,CAA3B;AACD,OAFD,MAEO;AACLL,QAAAA,WAAW,CAACQ,GAAZ,CAAgBJ,SAAhB,EAA2B,IAAIP,QAAJ,CAAaQ,aAAb,CAA3B;AACD;;AAED,aAAO,IAAIP,SAAJ,CAAc,KAAKC,QAAnB,EAA6BC,WAA7B,CAAP;AACD;AACD;AACJ;AACA;AACA;;AAhB2B,GAAD,EAkBrB;AACDC,IAAAA,GAAG,EAAE,eADJ;AAEDC,IAAAA,KAAK,EAAE,SAASQ,aAAT,CAAuBN,SAAvB,EAAkCO,KAAlC,EAAyC;AAC9C,UAAIC,UAAU,GAAG,KAAKZ,WAAL,CAAiBS,GAAjB,CAAqBL,SAArB,CAAjB;AACA,UAAIQ,UAAJ,EAAgBA,UAAU,CAACF,aAAX,CAAyBC,KAAzB,EAAgC,KAAKZ,QAAL,KAAkB,SAAlD;AACjB;AACD;AACJ;AACA;;AARK,GAlBqB,EA4BrB;AACDE,IAAAA,GAAG,EAAE,aADJ;AAEDC,IAAAA,KAAK,EAAE,SAASW,WAAT,GAAuB;AAC5B,aAAO,KAAKb,WAAL,CAAiBc,IAAjB,GAAwB,CAA/B;AACD;AACD;AACJ;AACA;AACA;AACA;;AATK,GA5BqB,EAuCrB;AACDb,IAAAA,GAAG,EAAE,gBADJ;AAEDC,IAAAA,KAAK,EAAE,SAASa,cAAT,CAAwBX,SAAxB,EAAmCC,aAAnC,EAAkD;AACvD,UAAIL,WAAW,GAAG,IAAIM,GAAJ,CAAQ,KAAKN,WAAb,CAAlB;;AAEA,UAAI,CAACA,WAAW,CAACO,GAAZ,CAAgBH,SAAhB,CAAL,EAAiC;AAC/B,eAAO,IAAIN,SAAJ,CAAc,KAAKC,QAAnB,EAA6BC,WAA7B,CAAP;AACD;;AAED,UAAIY,UAAU,GAAGZ,WAAW,CAACS,GAAZ,CAAgBL,SAAhB,EAA2BW,cAA3B,CAA0CV,aAA1C,CAAjB;;AAEA,UAAIO,UAAU,CAACC,WAAX,EAAJ,EAA8B;AAC5Bb,QAAAA,WAAW,CAACQ,GAAZ,CAAgBJ,SAAhB,EAA2BQ,UAA3B;AACD,OAFD,MAEO;AACLZ,QAAAA,WAAW,CAACgB,MAAZ,CAAmBZ,SAAnB;AACD;;AAED,aAAO,IAAIN,SAAJ,CAAc,KAAKC,QAAnB,EAA6BC,WAA7B,CAAP;AACD;AAlBA,GAvCqB,CAAZ,CAAZ;;AA4DA,SAAOF,SAAP;AACD,CAzFD,EAFA;;AA6FAF,eAAe,CAACE,SAAD,EAAY,cAAZ,EAA4B,UAAUC,QAAV,EAAoBK,SAApB,EAA+BC,aAA/B,EAA8C;AACvF,MAAIL,WAAW,GAAG,IAAIM,GAAJ,EAAlB;AACAN,EAAAA,WAAW,CAACQ,GAAZ,CAAgBJ,SAAhB,EAA2B,IAAIP,QAAJ,CAAaQ,aAAb,CAA3B;AACA,SAAO,IAAIP,SAAJ,CAAcC,QAAd,EAAwBC,WAAxB,CAAP;AACD,CAJc,CAAf;;AAMA,SAASF,SAAS,IAAImB,OAAtB","sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport EventSet from './EventSet';\n\nvar EventPool =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {String} poolName\n   * @param {String} eventType\n   * @param {Function[]} eventHandlers\n   * @return {EventPool}\n   */\n\n  /**\n   * @param {String} poolName\n   * @param {Map<String,EventSet>} handlerSets\n   */\n  function EventPool(poolName, handlerSets) {\n    _classCallCheck(this, EventPool);\n\n    /** @private */\n    this.handlerSets = handlerSets;\n    /** @private */\n\n    this.poolName = poolName;\n  }\n  /**\n   * @param {String} eventType\n   * @param {Function[]} eventHandlers\n   * @return {EventPool}\n   */\n\n\n  _createClass(EventPool, [{\n    key: \"addHandlers\",\n    value: function addHandlers(eventType, eventHandlers) {\n      var handlerSets = new Map(this.handlerSets);\n\n      if (handlerSets.has(eventType)) {\n        handlerSets.set(eventType, handlerSets.get(eventType).addHandlers(eventHandlers));\n      } else {\n        handlerSets.set(eventType, new EventSet(eventHandlers));\n      }\n\n      return new EventPool(this.poolName, handlerSets);\n    }\n    /**\n     * @param {String} eventType\n     * @param {Event} event\n     */\n\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(eventType, event) {\n      var handlerSet = this.handlerSets.get(eventType);\n      if (handlerSet) handlerSet.dispatchEvent(event, this.poolName === 'default');\n    }\n    /**\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"hasHandlers\",\n    value: function hasHandlers() {\n      return this.handlerSets.size > 0;\n    }\n    /**\n     * @param {String} eventType\n     * @param {Function[]} eventHandlers\n     * @return {EventPool}\n     */\n\n  }, {\n    key: \"removeHandlers\",\n    value: function removeHandlers(eventType, eventHandlers) {\n      var handlerSets = new Map(this.handlerSets);\n\n      if (!handlerSets.has(eventType)) {\n        return new EventPool(this.poolName, handlerSets);\n      }\n\n      var handlerSet = handlerSets.get(eventType).removeHandlers(eventHandlers);\n\n      if (handlerSet.hasHandlers()) {\n        handlerSets.set(eventType, handlerSet);\n      } else {\n        handlerSets.delete(eventType);\n      }\n\n      return new EventPool(this.poolName, handlerSets);\n    }\n  }]);\n\n  return EventPool;\n}();\n\n_defineProperty(EventPool, \"createByType\", function (poolName, eventType, eventHandlers) {\n  var handlerSets = new Map();\n  handlerSets.set(eventType, new EventSet(eventHandlers));\n  return new EventPool(poolName, handlerSets);\n});\n\nexport { EventPool as default };"]},"metadata":{},"sourceType":"module"}
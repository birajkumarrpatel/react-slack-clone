{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BIRAJ\\\\Desktop\\\\react-slack-clone\\\\src\\\\components\\\\Messages\\\\MessageForm.js\";\nimport React from \"react\";\nimport uuidv4 from \"uuid/v4\";\nimport firebase from \"../../firebase\";\nimport { Segment, Button, Input } from \"semantic-ui-react\";\nimport { Picker, emojiIndex } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport FileModal from \"./FileModal\";\nimport ProgressBar from \"./ProgressBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass MessageForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      storageRef: firebase.storage().ref(),\n      typingRef: firebase.database().ref(\"typing\"),\n      uploadTask: null,\n      uploadState: \"\",\n      percentUploaded: 0,\n      message: \"\",\n      channel: this.props.currentChannel,\n      user: this.props.currentUser,\n      loading: false,\n      errors: [],\n      modal: false,\n      emojiPicker: false\n    };\n\n    this.openModal = () => this.setState({\n      modal: true\n    });\n\n    this.closeModal = () => this.setState({\n      modal: false\n    });\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleKeyDown = event => {\n      if (event.keyCode === 13) {\n        this.sendMessage();\n      }\n\n      const {\n        message,\n        typingRef,\n        channel,\n        user\n      } = this.state;\n\n      if (message) {\n        typingRef.child(channel.id).child(user.uid).set(user.displayName);\n      } else {\n        typingRef.child(channel.id).child(user.uid).remove();\n      }\n    };\n\n    this.handleTogglePicker = () => {\n      this.setState({\n        emojiPicker: !this.state.emojiPicker\n      });\n    };\n\n    this.handleAddEmoji = emoji => {\n      const oldMessage = this.state.message;\n      const newMessage = this.colonToUnicode(`${oldMessage} ${emoji.colons}`);\n      this.setState({\n        message: newMessage,\n        emojiPicker: false\n      });\n      setTimeout(() => this.messageInputRef.focus(), 0);\n    };\n\n    this.colonToUnicode = message => {\n      return message.replace(/:[A-Za-z0-9_+-]+:/g, x => {\n        x = x.replace(/:/g, \"\");\n        let emoji = emojiIndex.emojis[x];\n\n        if (typeof emoji !== \"undefined\") {\n          let unicode = emoji.native;\n\n          if (typeof unicode !== \"undefined\") {\n            return unicode;\n          }\n        }\n\n        x = \":\" + x + \":\";\n      });\n    };\n\n    this.createMessage = (fileUrl = null) => {\n      const message = {\n        timestamp: firebase.database.ServerValue.TIMESTAMP,\n        user: {\n          id: this.state.user.uid,\n          name: this.state.user.displayName,\n          avatar: this.state.user.photoURL\n        }\n      };\n\n      if (fileUrl !== null) {\n        message[\"image\"] = fileUrl;\n      } else {\n        message[\"content\"] = this.state.message;\n      }\n\n      return message;\n    };\n\n    this.sendMessage = () => {\n      const {\n        getMessagesRef\n      } = this.props;\n      const {\n        message,\n        channel,\n        user,\n        typingRef\n      } = this.state;\n\n      if (message) {\n        this.setState({\n          loading: true\n        });\n        getMessagesRef().child(channel.id).push().set(this.createMessage()).then(() => {\n          this.setState({\n            loading: false,\n            message: \"\",\n            errors: []\n          });\n          typingRef.child(channel.id).child(user.uid).remove();\n        }).catch(err => {\n          console.error(err);\n          this.setState({\n            loading: false,\n            errors: this.state.errors.concat(err)\n          });\n        });\n      } else {\n        this.setState({\n          errors: this.state.errors.concat({\n            message: \"Add a message\"\n          })\n        });\n      }\n    };\n\n    this.getPath = () => {\n      if (this.props.isPrivateChannel) {\n        return `chat/private-${this.state.channel.id}`;\n      } else {\n        return \"chat/public\";\n      }\n    };\n\n    this.uploadFile = (file, metadata) => {\n      const pathToUpload = this.state.channel.id;\n      const ref = this.props.getMessagesRef();\n      const filePath = `${this.getPath()}/${uuidv4()}.jpg`;\n      this.setState({\n        uploadState: \"uploading\",\n        uploadTask: this.state.storageRef.child(filePath).put(file, metadata)\n      }, () => {\n        this.state.uploadTask.on(\"state_changed\", snap => {\n          const percentUploaded = Math.round(snap.bytesTransferred / snap.totalBytes * 100);\n          this.setState({\n            percentUploaded\n          });\n        }, err => {\n          console.error(err);\n          this.setState({\n            errors: this.state.errors.concat(err),\n            uploadState: \"error\",\n            uploadTask: null\n          });\n        }, () => {\n          this.state.uploadTask.snapshot.ref.getDownloadURL().then(downloadUrl => {\n            this.sendFileMessage(downloadUrl, ref, pathToUpload);\n          }).catch(err => {\n            console.error(err);\n            this.setState({\n              errors: this.state.errors.concat(err),\n              uploadState: \"error\",\n              uploadTask: null\n            });\n          });\n        });\n      });\n    };\n\n    this.sendFileMessage = (fileUrl, ref, pathToUpload) => {\n      ref.child(pathToUpload).push().set(this.createMessage(fileUrl)).then(() => {\n        this.setState({\n          uploadState: \"done\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          errors: this.state.errors.concat(err)\n        });\n      });\n    };\n  }\n\n  render() {\n    // prettier-ignore\n    const {\n      errors,\n      message,\n      loading,\n      modal,\n      uploadState,\n      percentUploaded,\n      emojiPicker\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Segment, {\n      className: \"message__form\",\n      children: [emojiPicker && /*#__PURE__*/_jsxDEV(Picker, {\n        set: \"apple\",\n        onSelect: this.handleAddEmoji,\n        className: \"emojiPIcker\",\n        title: \"Pick your emoji\",\n        emoji: \"point_up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        fluid: true,\n        name: \"message\",\n        onChange: this.handleChange,\n        onKeyDown: this.handleKeyDown,\n        value: message,\n        ref: node => this.messageInputRef = node,\n        style: {\n          marginBottom: \"0.7em\"\n        },\n        label: /*#__PURE__*/_jsxDEV(Button, {\n          icon: emojiPicker ? \"close\" : \"add\",\n          content: emojiPicker ? \"close\" : null,\n          onClick: this.handleTogglePicker\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 13\n        }, this),\n        labelPosition: \"left\",\n        className: errors.some(error => error.message.includes(\"message\")) ? \"error\" : \"\",\n        placeholder: \"Write your message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button.Group, {\n        icon: true,\n        widths: \"2\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: this.sendMessage,\n          disabled: loading,\n          color: \"orange\",\n          content: \"Add Reply\",\n          labelPosition: \"left\",\n          icon: \"edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          color: \"teal\",\n          disabled: uploadState === \"uploading\",\n          onClick: this.openModal,\n          content: \"Upload Media\",\n          labelPosition: \"right\",\n          icon: \"cloud upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FileModal, {\n        modal: modal,\n        closeModal: this.closeModal,\n        uploadFile: this.uploadFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n        uploadState: uploadState,\n        percentUploaded: percentUploaded\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default MessageForm;","map":{"version":3,"sources":["C:/Users/BIRAJ/Desktop/react-slack-clone/src/components/Messages/MessageForm.js"],"names":["React","uuidv4","firebase","Segment","Button","Input","Picker","emojiIndex","FileModal","ProgressBar","MessageForm","Component","state","storageRef","storage","ref","typingRef","database","uploadTask","uploadState","percentUploaded","message","channel","props","currentChannel","user","currentUser","loading","errors","modal","emojiPicker","openModal","setState","closeModal","handleChange","event","target","name","value","handleKeyDown","keyCode","sendMessage","child","id","uid","set","displayName","remove","handleTogglePicker","handleAddEmoji","emoji","oldMessage","newMessage","colonToUnicode","colons","setTimeout","messageInputRef","focus","replace","x","emojis","unicode","native","createMessage","fileUrl","timestamp","ServerValue","TIMESTAMP","avatar","photoURL","getMessagesRef","push","then","catch","err","console","error","concat","getPath","isPrivateChannel","uploadFile","file","metadata","pathToUpload","filePath","put","on","snap","Math","round","bytesTransferred","totalBytes","snapshot","getDownloadURL","downloadUrl","sendFileMessage","render","node","marginBottom","some","includes"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport uuidv4 from \"uuid/v4\";\nimport firebase from \"../../firebase\";\nimport { Segment, Button, Input } from \"semantic-ui-react\";\nimport { Picker, emojiIndex } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\n\nimport FileModal from \"./FileModal\";\nimport ProgressBar from \"./ProgressBar\";\n\nclass MessageForm extends React.Component {\n  state = {\n    storageRef: firebase.storage().ref(),\n    typingRef: firebase.database().ref(\"typing\"),\n    uploadTask: null,\n    uploadState: \"\",\n    percentUploaded: 0,\n    message: \"\",\n    channel: this.props.currentChannel,\n    user: this.props.currentUser,\n    loading: false,\n    errors: [],\n    modal: false,\n    emojiPicker: false\n  };\n\n  openModal = () => this.setState({ modal: true });\n\n  closeModal = () => this.setState({ modal: false });\n\n  handleChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  handleKeyDown = event => {\n    if(event.keyCode === 13) {\n      this.sendMessage();\n    }\n\n    const { message, typingRef, channel, user } = this.state;\n\n    if (message) {\n      typingRef\n        .child(channel.id)\n        .child(user.uid)\n        .set(user.displayName);\n    } else {\n      typingRef\n        .child(channel.id)\n        .child(user.uid)\n        .remove();\n    }\n  };\n\n  handleTogglePicker = () => {\n    this.setState({ emojiPicker: !this.state.emojiPicker });\n  }\n\n  handleAddEmoji = emoji => {\n    const oldMessage = this.state.message;\n    const newMessage = this.colonToUnicode(`${oldMessage} ${emoji.colons}`);\n    this.setState({ message: newMessage, emojiPicker: false });\n    setTimeout (() => this.messageInputRef.focus(), 0);\n  }\n\n  colonToUnicode = message => {\n    return message.replace(/:[A-Za-z0-9_+-]+:/g, x => {\n      x = x.replace(/:/g, \"\");\n      let emoji = emojiIndex.emojis[x];\n      if( typeof emoji !== \"undefined\") {\n        let unicode = emoji.native;\n        if(typeof unicode !== \"undefined\"){\n          return unicode;\n        }\n      }\n      x = \":\" + x + \":\";\n    });\n  };\n\n  createMessage = (fileUrl = null) => {\n    const message = {\n      timestamp: firebase.database.ServerValue.TIMESTAMP,\n      user: {\n        id: this.state.user.uid,\n        name: this.state.user.displayName,\n        avatar: this.state.user.photoURL\n      }\n    };\n    if (fileUrl !== null) {\n      message[\"image\"] = fileUrl;\n    } else {\n      message[\"content\"] = this.state.message;\n    }\n    return message;\n  };\n\n  sendMessage = () => {\n    const { getMessagesRef } = this.props;\n    const { message, channel, user, typingRef } = this.state;\n\n    if (message) {\n      this.setState({ loading: true });\n      getMessagesRef()\n        .child(channel.id)\n        .push()\n        .set(this.createMessage())\n        .then(() => {\n          this.setState({ loading: false, message: \"\", errors: [] });\n          typingRef\n            .child(channel.id)\n            .child(user.uid)\n            .remove();\n        })\n        .catch(err => {\n          console.error(err);\n          this.setState({\n            loading: false,\n            errors: this.state.errors.concat(err)\n          });\n        });\n    } else {\n      this.setState({\n        errors: this.state.errors.concat({ message: \"Add a message\" })\n      });\n    }\n  };\n\n  getPath = () => {\n    if (this.props.isPrivateChannel) {\n      return `chat/private-${this.state.channel.id}`;\n    } else {\n      return \"chat/public\";\n    }\n  };\n\n  uploadFile = (file, metadata) => {\n    const pathToUpload = this.state.channel.id;\n    const ref = this.props.getMessagesRef();\n    const filePath = `${this.getPath()}/${uuidv4()}.jpg`;\n\n    this.setState(\n      {\n        uploadState: \"uploading\",\n        uploadTask: this.state.storageRef.child(filePath).put(file, metadata)\n      },\n      () => {\n        this.state.uploadTask.on(\n          \"state_changed\",\n          snap => {\n            const percentUploaded = Math.round(\n              (snap.bytesTransferred / snap.totalBytes) * 100\n            );\n            this.setState({ percentUploaded });\n          },\n          err => {\n            console.error(err);\n            this.setState({\n              errors: this.state.errors.concat(err),\n              uploadState: \"error\",\n              uploadTask: null\n            });\n          },\n          () => {\n            this.state.uploadTask.snapshot.ref\n              .getDownloadURL()\n              .then(downloadUrl => {\n                this.sendFileMessage(downloadUrl, ref, pathToUpload);\n              })\n              .catch(err => {\n                console.error(err);\n                this.setState({\n                  errors: this.state.errors.concat(err),\n                  uploadState: \"error\",\n                  uploadTask: null\n                });\n              });\n          }\n        );\n      }\n    );\n  };\n\n  sendFileMessage = (fileUrl, ref, pathToUpload) => {\n    ref\n      .child(pathToUpload)\n      .push()\n      .set(this.createMessage(fileUrl))\n      .then(() => {\n        this.setState({ uploadState: \"done\" });\n      })\n      .catch(err => {\n        console.error(err);\n        this.setState({\n          errors: this.state.errors.concat(err)\n        });\n      });\n  };\n\n  render() {\n    // prettier-ignore\n    const { errors, message, loading, modal, uploadState, percentUploaded,\n    emojiPicker } = this.state;\n\n    return (\n      <Segment className=\"message__form\">\n        {emojiPicker && (\n          <Picker \n            set=\"apple\"\n            onSelect={this.handleAddEmoji}\n            className=\"emojiPIcker\"\n            title=\"Pick your emoji\"\n            emoji=\"point_up\"\n          />\n        )}\n        <Input\n          fluid\n          name=\"message\"\n          onChange={this.handleChange}\n          onKeyDown={this.handleKeyDown}\n          value={message}\n          ref={node => (this.messageInputRef = node)}\n          style={{ marginBottom: \"0.7em\" }}\n          label={\n            <Button \n              icon={emojiPicker ? \"close\" : \"add\"} \n              content={emojiPicker ? \"close\" : null}\n              onClick={this.handleTogglePicker}\n            />}          \n          labelPosition=\"left\"\n          className={\n            errors.some(error => error.message.includes(\"message\"))\n              ? \"error\"\n              : \"\"\n          }\n          placeholder=\"Write your message\"\n        />\n        <Button.Group icon widths=\"2\">\n          <Button\n            onClick={this.sendMessage}\n            disabled={loading}\n            color=\"orange\"\n            content=\"Add Reply\"\n            labelPosition=\"left\"\n            icon=\"edit\"\n          />\n          <Button\n            color=\"teal\"\n            disabled={uploadState === \"uploading\"}\n            onClick={this.openModal}\n            content=\"Upload Media\"\n            labelPosition=\"right\"\n            icon=\"cloud upload\"\n          />\n        </Button.Group>\n        <FileModal\n          modal={modal}\n          closeModal={this.closeModal}\n          uploadFile={this.uploadFile}\n        />\n        <ProgressBar\n          uploadState={uploadState}\n          percentUploaded={percentUploaded}\n        />\n      </Segment>\n    );\n  }\n}\n\nexport default MessageForm;\n"]},"metadata":{},"sourceType":"module"}
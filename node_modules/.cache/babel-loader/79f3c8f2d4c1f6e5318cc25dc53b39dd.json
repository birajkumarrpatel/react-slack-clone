{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BIRAJ\\\\Desktop\\\\react-slack-clone\\\\src\\\\components\\\\Messages\\\\Messages.js\";\nimport React from \"react\";\nimport { Segment, Comment } from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\nimport { setUserPosts } from \"../../actions\";\nimport firebase from \"../../firebase\";\nimport MessagesHeader from \"./MessagesHeader\";\nimport MessageForm from \"./MessageForm\";\nimport Message from \"./Message\";\nimport Typing from \"./Typing\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Messages extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      privateChannel: this.props.isPrivateChannel,\n      privateMessagesRef: firebase.database().ref(\"privateMessages\"),\n      messagesRef: firebase.database().ref(\"messages\"),\n      messages: [],\n      messagesLoading: true,\n      channel: this.props.currentChannel,\n      isChannelStarred: false,\n      user: this.props.currentUser,\n      usersRef: firebase.database().ref(\"users\"),\n      numUniqueUsers: \"\",\n      searchTerm: \"\",\n      searchLoading: false,\n      searchResults: [],\n      typingRef: firebase.database().ref(\"typing\")\n    };\n\n    this.addListeners = channelId => {\n      this.addMessageListener(channelId);\n      this.addTypingListeners(channelId);\n    };\n\n    this.addTypingListeners = channelId => {\n      let typingUsers = [];\n      this.state.typingRef.child(channelId).on(\"child_added\", snap => {\n        if (snap.key !== this.state.user.uid) {\n          typingUsers = typingUsers.concat({\n            id: snap.key,\n            name: snap.val()\n          });\n          this.setState({\n            typingUsers\n          });\n        }\n      });\n    };\n\n    this.addMessageListener = channelId => {\n      let loadedMessages = [];\n      const ref = this.getMessagesRef();\n      ref.child(channelId).on(\"child_added\", snap => {\n        loadedMessages.push(snap.val());\n        this.setState({\n          messages: loadedMessages,\n          messagesLoading: false\n        });\n        this.countUniqueUsers(loadedMessages);\n        this.countUsersPosts(loadedMessages);\n      });\n    };\n\n    this.addUserStarsListener = (channelId, userId) => {\n      this.state.usersRef.child(userId).child(\"starred\").once(\"value\").then(data => {\n        if (data.val() !== null) {\n          const channelIds = Object.keys(data.val());\n          const prevStarred = channelIds.includes(channelId);\n          this.setState({\n            isChannelStarred: prevStarred\n          });\n        }\n      });\n    };\n\n    this.getMessagesRef = () => {\n      const {\n        messagesRef,\n        privateMessagesRef,\n        privateChannel\n      } = this.state;\n      return privateChannel ? privateMessagesRef : messagesRef;\n    };\n\n    this.handleStar = () => {\n      this.setState(prevState => ({\n        isChannelStarred: !prevState.isChannelStarred\n      }), () => this.starChannel());\n    };\n\n    this.starChannel = () => {\n      if (this.state.isChannelStarred) {\n        this.state.usersRef.child(`${this.state.user.uid}/starred`).update({\n          [this.state.channel.id]: {\n            name: this.state.channel.name,\n            daetails: this.state.channel.details,\n            createdBy: {\n              name: this.state.channel.createdBy.name,\n              avatar: this.state.channel.createdBy.avatar\n            }\n          }\n        });\n      } else {\n        this.state.usersRef.child(`${this.state.user.uid}/starred`).child(this.state.channel.id).remove(err => {\n          if (err !== null) {\n            console.error(err);\n          }\n        });\n      }\n    };\n\n    this.handleSearchChange = event => {\n      this.setState({\n        searchTerm: event.target.value,\n        searchLoading: true\n      }, () => this.handleSearchMessages());\n    };\n\n    this.handleSearchMessages = () => {\n      const channelMessages = [...this.state.messages];\n      const regex = new RegExp(this.state.searchTerm, \"gi\");\n      const searchResults = channelMessages.reduce((acc, message) => {\n        if (message.content && message.content.match(regex) || message.user.name.match(regex)) {\n          acc.push(message);\n        }\n\n        return acc;\n      }, []);\n      this.setState({\n        searchResults\n      });\n      setTimeout(() => this.setState({\n        searchLoading: false\n      }), 1000);\n    };\n\n    this.countUniqueUsers = messages => {\n      const uniqueUsers = messages.reduce((acc, message) => {\n        if (!acc.includes(message.user.name)) {\n          acc.push(message.user.name);\n        }\n\n        return acc;\n      }, []);\n      const plural = uniqueUsers.length > 1 || uniqueUsers.length === 0;\n      const numUniqueUsers = `${uniqueUsers.length} user${plural ? \"s\" : \"\"}`;\n      this.setState({\n        numUniqueUsers\n      });\n    };\n\n    this.countUsersPosts = messages => {\n      let userPosts = messages.reduce((acc, message) => {\n        if (message.user.name in acc) {\n          acc[message.user.name].count += 1;\n        } else {\n          acc[message.user.name] = {\n            avatar: message.user.avatar,\n            count: 1\n          };\n        }\n\n        return acc;\n      }, {});\n      this.props.setUserPosts(userPosts);\n    };\n\n    this.displayMessages = messages => messages.length > 0 && messages.map(message => /*#__PURE__*/_jsxDEV(Message, {\n      message: message,\n      user: this.state.user\n    }, message.timestamp, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this));\n\n    this.displayChannelName = channel => {\n      return channel ? `${this.state.privateChannel ? \"@\" : \"#\"}${channel.name}` : \"\";\n    };\n  }\n\n  componentDidMount() {\n    const {\n      channel,\n      user\n    } = this.state;\n\n    if (channel && user) {\n      this.addListeners(channel.id);\n      this.addUserStarsListener(channel.id, user.uid);\n    }\n  }\n\n  render() {\n    // prettier-ignore\n    const {\n      messagesRef,\n      messages,\n      channel,\n      user,\n      numUniqueUsers,\n      searchTerm,\n      searchResults,\n      searchLoading,\n      privateChannel,\n      isChannelStarred\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MessagesHeader, {\n        channelName: this.displayChannelName(channel),\n        numUniqueUsers: numUniqueUsers,\n        handleSearchChange: this.handleSearchChange,\n        searchLoading: searchLoading,\n        isPrivateChannel: privateChannel,\n        handleStar: this.handleStar,\n        isChannelStarred: isChannelStarred\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Segment, {\n        children: /*#__PURE__*/_jsxDEV(Comment.Group, {\n          className: \"messages\",\n          children: [searchTerm ? this.displayMessages(searchResults) : this.displayMessages(messages), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"flex\",\n              alignItems: \"center\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"user__typing\",\n              children: \"bethany is typing\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 17\n            }, this), \" \", /*#__PURE__*/_jsxDEV(Typing, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 73\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageForm, {\n        messagesRef: messagesRef,\n        currentChannel: channel,\n        currentUser: user,\n        isPrivateChannel: privateChannel,\n        getMessagesRef: this.getMessagesRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default connect(null, {\n  setUserPosts\n})(Messages);","map":{"version":3,"sources":["C:/Users/BIRAJ/Desktop/react-slack-clone/src/components/Messages/Messages.js"],"names":["React","Segment","Comment","connect","setUserPosts","firebase","MessagesHeader","MessageForm","Message","Typing","Messages","Component","state","privateChannel","props","isPrivateChannel","privateMessagesRef","database","ref","messagesRef","messages","messagesLoading","channel","currentChannel","isChannelStarred","user","currentUser","usersRef","numUniqueUsers","searchTerm","searchLoading","searchResults","typingRef","addListeners","channelId","addMessageListener","addTypingListeners","typingUsers","child","on","snap","key","uid","concat","id","name","val","setState","loadedMessages","getMessagesRef","push","countUniqueUsers","countUsersPosts","addUserStarsListener","userId","once","then","data","channelIds","Object","keys","prevStarred","includes","handleStar","prevState","starChannel","update","daetails","details","createdBy","avatar","remove","err","console","error","handleSearchChange","event","target","value","handleSearchMessages","channelMessages","regex","RegExp","reduce","acc","message","content","match","setTimeout","uniqueUsers","plural","length","userPosts","count","displayMessages","map","timestamp","displayChannelName","componentDidMount","render","display","alignItems"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Segment, Comment } from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\nimport { setUserPosts } from \"../../actions\"\nimport firebase from \"../../firebase\";\n\nimport MessagesHeader from \"./MessagesHeader\";\nimport MessageForm from \"./MessageForm\";\nimport Message from \"./Message\";\nimport Typing from \"./Typing\";\n\nclass Messages extends React.Component {\n  state = {\n    privateChannel: this.props.isPrivateChannel,\n    privateMessagesRef: firebase.database().ref(\"privateMessages\"),\n    messagesRef: firebase.database().ref(\"messages\"),\n    messages: [],\n    messagesLoading: true,\n    channel: this.props.currentChannel,\n    isChannelStarred: false,\n    user: this.props.currentUser,\n    usersRef: firebase.database().ref(\"users\"),\n    numUniqueUsers: \"\",\n    searchTerm: \"\",\n    searchLoading: false,\n    searchResults: [],\n    typingRef: firebase.database().ref(\"typing\")\n  };\n\n  componentDidMount() {\n    const { channel, user } = this.state;\n\n    if (channel && user) {\n      this.addListeners(channel.id);\n      this.addUserStarsListener(channel.id, user.uid);\n    }\n  }\n\n  addListeners = channelId => {\n    this.addMessageListener(channelId);\n    this.addTypingListeners(channelId);\n  };\n\n  addTypingListeners = channelId => {\n    let typingUsers = [];\n    this.state.typingRef\n      .child(channelId)\n      .on(\"child_added\", snap => {\n        if(snap.key !== this.state.user.uid) {\n          typingUsers = typingUsers.concat({\n            id: snap.key,\n            name: snap.val()\n          })\n          this.setState({ typingUsers });\n        }\n      })\n  }\n\n  addMessageListener = channelId => {\n    let loadedMessages = [];\n    const ref = this.getMessagesRef();\n    ref.child(channelId).on(\"child_added\", snap => {\n      loadedMessages.push(snap.val());\n      this.setState({\n        messages: loadedMessages,\n        messagesLoading: false\n      });\n      this.countUniqueUsers(loadedMessages);\n      this.countUsersPosts(loadedMessages);\n    });\n  };\n\n  addUserStarsListener = (channelId, userId) => {\n    this.state.usersRef\n      .child(userId)\n      .child(\"starred\")\n      .once(\"value\")\n      .then(data => {\n        if(data.val() !== null){\n          const channelIds = Object.keys(data.val()) \n          const prevStarred = channelIds.includes(channelId);\n          this.setState({ isChannelStarred: prevStarred });\n        }\n      });\n  }\n\n  getMessagesRef = () => {\n    const { messagesRef, privateMessagesRef, privateChannel } = this.state;\n    return privateChannel ? privateMessagesRef : messagesRef;\n  };\n\n  handleStar = () => {\n    this.setState(prevState => ({\n      isChannelStarred: !prevState.isChannelStarred\n    }), () => this.starChannel());\n  }\n\n  starChannel = () => {\n    if(this.state.isChannelStarred){\n      this.state.usersRef\n        .child(`${this.state.user.uid}/starred`)\n        .update({\n          [this.state.channel.id]:{\n            name: this.state.channel.name,\n            daetails: this.state.channel.details,\n            createdBy: {\n              name: this.state.channel.createdBy.name,\n              avatar: this.state.channel.createdBy.avatar\n            }\n          }\n        });\n    } else {\n        this.state.usersRef\n          .child(`${this.state.user.uid}/starred`)\n          .child(this.state.channel.id)\n          .remove(err => {\n            if(err !== null){\n              console.error(err);\n            }\n          });\n      }\n  }\n\n  handleSearchChange = event => {\n    this.setState(\n      {\n        searchTerm: event.target.value,\n        searchLoading: true\n      },\n      () => this.handleSearchMessages()\n    );\n  };\n\n  handleSearchMessages = () => {\n    const channelMessages = [...this.state.messages];\n    const regex = new RegExp(this.state.searchTerm, \"gi\");\n    const searchResults = channelMessages.reduce((acc, message) => {\n      if (\n        (message.content && message.content.match(regex)) ||\n        message.user.name.match(regex)\n      ) {\n        acc.push(message);\n      }\n      return acc;\n    }, []);\n    this.setState({ searchResults });\n    setTimeout(() => this.setState({ searchLoading: false }), 1000);\n  };\n\n  countUniqueUsers = messages => {\n    const uniqueUsers = messages.reduce((acc, message) => {\n      if (!acc.includes(message.user.name)) {\n        acc.push(message.user.name);\n      }\n      return acc;\n    }, []);\n    const plural = uniqueUsers.length > 1 || uniqueUsers.length === 0;\n    const numUniqueUsers = `${uniqueUsers.length} user${plural ? \"s\" : \"\"}`;\n    this.setState({ numUniqueUsers });\n  };\n\n  countUsersPosts = messages => {\n    let userPosts = messages.reduce((acc, message) => {\n      if(message.user.name in acc) {\n        acc[message.user.name].count += 1;\n      } else {\n        acc[message.user.name] = {\n          avatar: message.user.avatar,\n          count: 1\n        }\n      }\n      return acc;\n    }, {});\n    this.props.setUserPosts(userPosts);\n  }\n\n  displayMessages = messages =>\n    messages.length > 0 &&\n    messages.map(message => (\n      <Message\n        key={message.timestamp}\n        message={message}\n        user={this.state.user}\n      />\n    ));\n\n  displayChannelName = channel => {\n    return channel\n      ? `${this.state.privateChannel ? \"@\" : \"#\"}${channel.name}`\n      : \"\";\n  };\n\n  render() {\n    // prettier-ignore\n    const { messagesRef, messages, channel, user, numUniqueUsers, searchTerm,\n    searchResults, searchLoading, privateChannel, isChannelStarred } = this.state;\n\n    return (\n      <React.Fragment>\n        <MessagesHeader\n          channelName={this.displayChannelName(channel)}\n          numUniqueUsers={numUniqueUsers}\n          handleSearchChange={this.handleSearchChange}\n          searchLoading={searchLoading}\n          isPrivateChannel={privateChannel}\n          handleStar={this.handleStar}\n          isChannelStarred={isChannelStarred}\n        />\n\n        <Segment>\n          <Comment.Group className=\"messages\">\n            {searchTerm\n              ? this.displayMessages(searchResults)\n              : this.displayMessages(messages)}\n              <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                <span className=\"user__typing\">bethany is typing</span> <Typing />\n              </div>\n          </Comment.Group>\n        </Segment>\n\n        <MessageForm\n          messagesRef={messagesRef}\n          currentChannel={channel}\n          currentUser={user}\n          isPrivateChannel={privateChannel}\n          getMessagesRef={this.getMessagesRef}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default connect(null, { setUserPosts }) (Messages);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { combineReducers } from \"redux\";\nimport * as actionTypes from \"../actions/types\";\nconst initialUserState = {\n  currentUser: null,\n  isLoading: true,\n  userPosts: null\n};\n\nconst user_reducer = (state = initialUserState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_USER:\n      return {\n        currentUser: action.payload.currentUser,\n        isLoading: false\n      };\n\n    case actionTypes.CLEAR_USER:\n      return { ...state,\n        isLoading: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst initialChannelState = {\n  currentChannel: null,\n  isPrivateChannel: false\n};\n\nconst channel_reducer = (state = initialChannelState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_CURRENT_CHANNEL:\n      return { ...state,\n        currentChannel: action.payload.currentChannel\n      };\n\n    case actionTypes.SET_PRIVATE_CHANNEL:\n      return { ...state,\n        isPrivateChannel: action.payload.isPrivateChannel\n      };\n\n    case actionTypes.SET_PRIVATE_POSTS:\n      return { ...state,\n        userPosts: action.payload.userPosts\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst InitialColorsState = {\n  primaryColor: \"\",\n  secondaryColor: \"\"\n};\n\nconst colors_reducer = (state = InitialColorsState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_COLORS:\n      return {\n        primaryColor: action.payload.primaryColor,\n        secondaryColor: action.payload.secondaryColor\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst rootReducer = combineReducers({\n  user: user_reducer,\n  channel: channel_reducer,\n  colors: colors_reducer\n});\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/BIRAJ/Desktop/react-slack-clone/src/reducers/index.js"],"names":["combineReducers","actionTypes","initialUserState","currentUser","isLoading","userPosts","user_reducer","state","action","type","SET_USER","payload","CLEAR_USER","initialChannelState","currentChannel","isPrivateChannel","channel_reducer","SET_CURRENT_CHANNEL","SET_PRIVATE_CHANNEL","SET_PRIVATE_POSTS","InitialColorsState","primaryColor","secondaryColor","colors_reducer","SET_COLORS","rootReducer","user","channel","colors"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,OAAO,KAAKC,WAAZ,MAA6B,kBAA7B;AAEA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,WAAW,EAAE,IADU;AAEvBC,EAAAA,SAAS,EAAE,IAFY;AAGvBC,EAAAA,SAAS,EAAE;AAHY,CAAzB;;AAMA,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGL,gBAAT,EAA2BM,MAA3B,KAAsC;AACzD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,WAAW,CAACS,QAAjB;AACE,aAAO;AACLP,QAAAA,WAAW,EAAEK,MAAM,CAACG,OAAP,CAAeR,WADvB;AAELC,QAAAA,SAAS,EAAE;AAFN,OAAP;;AAIF,SAAKH,WAAW,CAACW,UAAjB;AACE,aAAO,EACL,GAAGL,KADE;AAELH,QAAAA,SAAS,EAAE;AAFN,OAAP;;AAIF;AACE,aAAOG,KAAP;AAZJ;AAcD,CAfD;;AAiBA,MAAMM,mBAAmB,GAAG;AAC1BC,EAAAA,cAAc,EAAE,IADU;AAE1BC,EAAAA,gBAAgB,EAAE;AAFQ,CAA5B;;AAKA,MAAMC,eAAe,GAAG,CAACT,KAAK,GAAGM,mBAAT,EAA8BL,MAA9B,KAAyC;AAC/D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,WAAW,CAACgB,mBAAjB;AACE,aAAO,EACL,GAAGV,KADE;AAELO,QAAAA,cAAc,EAAEN,MAAM,CAACG,OAAP,CAAeG;AAF1B,OAAP;;AAIF,SAAKb,WAAW,CAACiB,mBAAjB;AACE,aAAO,EACL,GAAGX,KADE;AAELQ,QAAAA,gBAAgB,EAAEP,MAAM,CAACG,OAAP,CAAeI;AAF5B,OAAP;;AAIF,SAAKd,WAAW,CAACkB,iBAAjB;AACE,aAAO,EACL,GAAGZ,KADE;AAELF,QAAAA,SAAS,EAAEG,MAAM,CAACG,OAAP,CAAeN;AAFrB,OAAP;;AAIF;AACE,aAAOE,KAAP;AAjBJ;AAmBD,CApBD;;AAsBA,MAAMa,kBAAkB,GAAG;AACzBC,EAAAA,YAAY,EAAE,EADW;AAEzBC,EAAAA,cAAc,EAAE;AAFS,CAA3B;;AAKA,MAAMC,cAAc,GAAG,CAAChB,KAAK,GAAGa,kBAAT,EAA6BZ,MAA7B,KAAwC;AAC7D,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKR,WAAW,CAACuB,UAAjB;AACE,aAAO;AACLH,QAAAA,YAAY,EAAEb,MAAM,CAACG,OAAP,CAAeU,YADxB;AAELC,QAAAA,cAAc,EAAEd,MAAM,CAACG,OAAP,CAAeW;AAF1B,OAAP;;AAIF;AACE,aAAOf,KAAP;AAPJ;AASD,CAVD;;AAYA,MAAMkB,WAAW,GAAGzB,eAAe,CAAC;AAClC0B,EAAAA,IAAI,EAAEpB,YAD4B;AAElCqB,EAAAA,OAAO,EAAEX,eAFyB;AAGlCY,EAAAA,MAAM,EAAEL;AAH0B,CAAD,CAAnC;AAMA,eAAeE,WAAf","sourcesContent":["import { combineReducers } from \"redux\";\nimport * as actionTypes from \"../actions/types\";\n\nconst initialUserState = {\n  currentUser: null,\n  isLoading: true,\n  userPosts: null\n};\n\nconst user_reducer = (state = initialUserState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_USER:\n      return {\n        currentUser: action.payload.currentUser,\n        isLoading: false\n      };\n    case actionTypes.CLEAR_USER:\n      return {\n        ...state,\n        isLoading: false\n      };\n    default:\n      return state;\n  }\n};\n\nconst initialChannelState = {\n  currentChannel: null,\n  isPrivateChannel: false\n};\n\nconst channel_reducer = (state = initialChannelState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_CURRENT_CHANNEL:\n      return {\n        ...state,\n        currentChannel: action.payload.currentChannel\n      };\n    case actionTypes.SET_PRIVATE_CHANNEL:\n      return {\n        ...state,\n        isPrivateChannel: action.payload.isPrivateChannel\n      };\n    case actionTypes.SET_PRIVATE_POSTS:\n      return {\n        ...state,\n        userPosts: action.payload.userPosts\n      }\n    default:\n      return state;\n  }\n};\n\nconst InitialColorsState = {\n  primaryColor: \"\",\n  secondaryColor: \"\"\n}\n\nconst colors_reducer = (state = InitialColorsState, action) => {\n  switch(action.type){\n    case actionTypes.SET_COLORS:\n      return {\n        primaryColor: action.payload.primaryColor,\n        secondaryColor: action.payload.secondaryColor\n      }\n    default:\n      return state;  \n  }\n};\n\nconst rootReducer = combineReducers({\n  user: user_reducer,\n  channel: channel_reducer,\n  colors: colors_reducer\n});\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}
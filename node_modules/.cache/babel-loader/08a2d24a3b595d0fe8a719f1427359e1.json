{"ast":null,"code":"import _classCallCheck from\"C:/Users/BIRAJ/Desktop/react-slack-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/BIRAJ/Desktop/react-slack-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"C:/Users/BIRAJ/Desktop/react-slack-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"C:/Users/BIRAJ/Desktop/react-slack-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from\"react\";import firebase from\"../../firebase\";import{connect}from\"react-redux\";import{setCurrentChannel,setPrivateChannel}from\"../../actions\";import{Menu,Icon}from\"semantic-ui-react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var DirectMessages=/*#__PURE__*/function(_React$Component){_inherits(DirectMessages,_React$Component);var _super=_createSuper(DirectMessages);function DirectMessages(){var _this;_classCallCheck(this,DirectMessages);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={activeChannel:\"\",user:_this.props.currentUser,users:[],usersRef:firebase.database().ref(\"users\"),connectedRef:firebase.database().ref(\".info/connected\"),presenceRef:firebase.database().ref(\"presence\")};_this.addListeners=function(currentUserUid){var loadedUsers=[];_this.state.usersRef.on(\"child_added\",function(snap){if(currentUserUid!==snap.key){var user=snap.val();user[\"uid\"]=snap.key;user[\"status\"]=\"offline\";loadedUsers.push(user);_this.setState({users:loadedUsers});}});_this.state.connectedRef.on(\"value\",function(snap){if(snap.val()===true){var ref=_this.state.presenceRef.child(currentUserUid);ref.set(true);ref.onDisconnect().remove(function(err){if(err!==null){console.error(err);}});}});_this.state.presenceRef.on(\"child_added\",function(snap){if(currentUserUid!==snap.key){_this.addStatusToUser(snap.key);}});_this.state.presenceRef.on(\"child_removed\",function(snap){if(currentUserUid!==snap.key){_this.addStatusToUser(snap.key,false);}});};_this.addStatusToUser=function(userId){var connected=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var updatedUsers=_this.state.users.reduce(function(acc,user){if(user.uid===userId){user[\"status\"]=\"\".concat(connected?\"online\":\"offline\");}return acc.concat(user);},[]);_this.setState({users:updatedUsers});};_this.isUserOnline=function(user){return user.status===\"online\";};_this.changeChannel=function(user){var channelId=_this.getChannelId(user.uid);var channelData={id:channelId,name:user.name};_this.props.setCurrentChannel(channelData);_this.props.setPrivateChannel(true);_this.setActiveChannel(user.uid);};_this.getChannelId=function(userId){var currentUserId=_this.state.user.uid;return userId<currentUserId?\"\".concat(userId,\"/\").concat(currentUserId):\"\".concat(currentUserId,\"/\").concat(userId);};_this.setActiveChannel=function(userId){_this.setState({activeChannel:userId});};return _this;}_createClass(DirectMessages,[{key:\"componentDidMount\",value:function componentDidMount(){if(this.state.user){this.addListeners(this.state.user.uid);}}},{key:\"render\",value:function render(){var _this2=this;var _this$state=this.state,users=_this$state.users,activeChannel=_this$state.activeChannel;return/*#__PURE__*/_jsxs(Menu.Menu,{className:\"menu\",children:[/*#__PURE__*/_jsxs(Menu.Item,{children:[/*#__PURE__*/_jsxs(\"span\",{children:[/*#__PURE__*/_jsx(Icon,{name:\"mail\"}),\" DIRECT MESSAGES\"]}),\" \",\"(\",users.length,\")\"]}),users.map(function(user){return/*#__PURE__*/_jsxs(Menu.Item,{active:user.uid===activeChannel,onClick:function onClick(){return _this2.changeChannel(user);},style:{opacity:0.7,fontStyle:\"italic\"},children:[/*#__PURE__*/_jsx(Icon,{name:\"circle\",color:_this2.isUserOnline(user)?\"green\":\"red\"}),\"@ \",user.name]},user.uid);})]});}}]);return DirectMessages;}(React.Component);export default connect(null,{setCurrentChannel:setCurrentChannel,setPrivateChannel:setPrivateChannel})(DirectMessages);","map":{"version":3,"sources":["C:/Users/BIRAJ/Desktop/react-slack-clone/src/components/SidePanel/DirectMessages.js"],"names":["React","firebase","connect","setCurrentChannel","setPrivateChannel","Menu","Icon","DirectMessages","state","activeChannel","user","props","currentUser","users","usersRef","database","ref","connectedRef","presenceRef","addListeners","currentUserUid","loadedUsers","on","snap","key","val","push","setState","child","set","onDisconnect","remove","err","console","error","addStatusToUser","userId","connected","updatedUsers","reduce","acc","uid","concat","isUserOnline","status","changeChannel","channelId","getChannelId","channelData","id","name","setActiveChannel","currentUserId","length","map","opacity","fontStyle","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport firebase from \"../../firebase\";\nimport { connect } from \"react-redux\";\nimport { setCurrentChannel, setPrivateChannel } from \"../../actions\";\nimport { Menu, Icon } from \"semantic-ui-react\";\n\nclass DirectMessages extends React.Component {\n  state = {\n    activeChannel: \"\",\n    user: this.props.currentUser,\n    users: [],\n    usersRef: firebase.database().ref(\"users\"),\n    connectedRef: firebase.database().ref(\".info/connected\"),\n    presenceRef: firebase.database().ref(\"presence\")\n  };\n\n  componentDidMount() {\n    if (this.state.user) {\n      this.addListeners(this.state.user.uid);\n    }\n  }\n\n  addListeners = currentUserUid => {\n    let loadedUsers = [];\n    this.state.usersRef.on(\"child_added\", snap => {\n      if (currentUserUid !== snap.key) {\n        let user = snap.val();\n        user[\"uid\"] = snap.key;\n        user[\"status\"] = \"offline\";\n        loadedUsers.push(user);\n        this.setState({ users: loadedUsers });\n      }\n    });\n\n    this.state.connectedRef.on(\"value\", snap => {\n      if (snap.val() === true) {\n        const ref = this.state.presenceRef.child(currentUserUid);\n        ref.set(true);\n        ref.onDisconnect().remove(err => {\n          if (err !== null) {\n            console.error(err);\n          }\n        });\n      }\n    });\n\n    this.state.presenceRef.on(\"child_added\", snap => {\n      if (currentUserUid !== snap.key) {\n        this.addStatusToUser(snap.key);\n      }\n    });\n\n    this.state.presenceRef.on(\"child_removed\", snap => {\n      if (currentUserUid !== snap.key) {\n        this.addStatusToUser(snap.key, false);\n      }\n    });\n  };\n\n  addStatusToUser = (userId, connected = true) => {\n    const updatedUsers = this.state.users.reduce((acc, user) => {\n      if (user.uid === userId) {\n        user[\"status\"] = `${connected ? \"online\" : \"offline\"}`;\n      }\n      return acc.concat(user);\n    }, []);\n    this.setState({ users: updatedUsers });\n  };\n\n  isUserOnline = user => user.status === \"online\";\n\n  changeChannel = user => {\n    const channelId = this.getChannelId(user.uid);\n    const channelData = {\n      id: channelId,\n      name: user.name\n    };\n    this.props.setCurrentChannel(channelData);\n    this.props.setPrivateChannel(true);\n    this.setActiveChannel(user.uid);\n  };\n\n  getChannelId = userId => {\n    const currentUserId = this.state.user.uid;\n    return userId < currentUserId\n      ? `${userId}/${currentUserId}`\n      : `${currentUserId}/${userId}`;\n  };\n\n  setActiveChannel = userId => {\n    this.setState({ activeChannel: userId });\n  };\n\n  render() {\n    const { users, activeChannel } = this.state;\n\n    return (\n      <Menu.Menu className=\"menu\">\n        <Menu.Item>\n          <span>\n            <Icon name=\"mail\" /> DIRECT MESSAGES\n          </span>{\" \"}\n          ({users.length})\n        </Menu.Item>\n        {users.map(user => (\n          <Menu.Item\n            key={user.uid}\n            active={user.uid === activeChannel}\n            onClick={() => this.changeChannel(user)}\n            style={{ opacity: 0.7, fontStyle: \"italic\" }}\n          >\n            <Icon\n              name=\"circle\"\n              color={this.isUserOnline(user) ? \"green\" : \"red\"}\n            />\n            @ {user.name}\n          </Menu.Item>\n        ))}\n      </Menu.Menu>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  { setCurrentChannel, setPrivateChannel }\n)(DirectMessages);\n"]},"metadata":{},"sourceType":"module"}
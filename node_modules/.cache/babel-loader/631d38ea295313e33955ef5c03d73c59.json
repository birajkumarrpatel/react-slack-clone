{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BIRAJ\\\\Desktop\\\\react-slack-clone\\\\src\\\\components\\\\Messages\\\\Messages.js\";\nimport React from \"react\";\nimport { Segment, Comment } from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\nimport { setUserPosts } from \"../../actions\";\nimport firebase from \"../../firebase\";\nimport MessagesHeader from \"./MessagesHeader\";\nimport MessageForm from \"./MessageForm\";\nimport Message from \"./Message\";\nimport Typing from \"./Typing\";\nimport Skeleton from \"./skeleton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Messages extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      privateChannel: this.props.isPrivateChannel,\n      privateMessagesRef: firebase.database().ref(\"privateMessages\"),\n      messagesRef: firebase.database().ref(\"messages\"),\n      messages: [],\n      messagesLoading: true,\n      channel: this.props.currentChannel,\n      isChannelStarred: false,\n      user: this.props.currentUser,\n      usersRef: firebase.database().ref(\"users\"),\n      numUniqueUsers: \"\",\n      searchTerm: \"\",\n      searchLoading: false,\n      searchResults: [],\n      typingRef: firebase.database().ref(\"typing\"),\n      typingUsers: [],\n      connectedRef: firebase.database().ref(\".info/connected\"),\n      listeners: []\n    };\n\n    this.addToListeners = (id, ref, event) => {\n      const index = this.state.listeners.findIndex(listeners => {\n        return listeners.id === id && listener.ref === ref && listener.event === event;\n      });\n\n      if (index === -1) {\n        const newListener = {\n          id,\n          ref,\n          event\n        };\n        this.setState({\n          listeners: this.state.listeners.concat(newListener)\n        });\n      }\n    };\n\n    this.removeListeners = listeners => {\n      listeners.forEach(listener => {\n        listener.ref.child(listener.id).off(listener.event);\n      });\n    };\n\n    this.scrollToBottom = () => {\n      this.messagesEnd.scrollIntoView({\n        behaviour: \"smooth\"\n      });\n    };\n\n    this.addListeners = channelId => {\n      this.addMessageListener(channelId);\n      this.addTypingListeners(channelId);\n    };\n\n    this.addTypingListeners = channelId => {\n      let typingUsers = [];\n      this.state.typingRef.child(channelId).on(\"child_added\", snap => {\n        if (snap.key !== this.state.user.uid) {\n          typingUsers = typingUsers.concat({\n            id: snap.key,\n            name: snap.val()\n          });\n          this.setState({\n            typingUsers\n          });\n        }\n      });\n      this.addListeners(channelId, this.state.typingRef, \"child_added\");\n      this.state.typingRef.child(channelId).on(\"child_removed\", snap => {\n        const index = typingUsers.findIndex(user => user.id === snap.key);\n\n        if (index !== -1) {\n          typingUsers = typingUsers.filter(user => user.id !== snap.key);\n          this.setState({\n            typingUsers\n          });\n        }\n      });\n      this.addListeners(channelId, this.state.typingRef, \"child_removed\");\n      this.state.connectedRef.on(\"value\", snap => {\n        if (snap.val() === true) {\n          this.state.typingRef.child(channelId).child(this.state.user.uid).onDisconnect().remove(err => {\n            if (err !== null) {\n              console.error(err);\n            }\n          });\n        }\n      });\n    };\n\n    this.addMessageListener = channelId => {\n      let loadedMessages = [];\n      const ref = this.getMessagesRef();\n      ref.child(channelId).on(\"child_added\", snap => {\n        loadedMessages.push(snap.val());\n        this.setState({\n          messages: loadedMessages,\n          messagesLoading: false\n        });\n        this.countUniqueUsers(loadedMessages);\n        this.countUserPosts(loadedMessages);\n      });\n      this.addToListeners(channelId, ref, \"child_added\");\n    };\n\n    this.addUserStarsListener = (channelId, userId) => {\n      this.state.usersRef.child(userId).child(\"starred\").once(\"value\").then(data => {\n        if (data.val() !== null) {\n          const channelIds = Object.keys(data.val());\n          const prevStarred = channelIds.includes(channelId);\n          this.setState({\n            isChannelStarred: prevStarred\n          });\n        }\n      });\n    };\n\n    this.getMessagesRef = () => {\n      const {\n        messagesRef,\n        privateMessagesRef,\n        privateChannel\n      } = this.state;\n      return privateChannel ? privateMessagesRef : messagesRef;\n    };\n\n    this.handleStar = () => {\n      this.setState(prevState => ({\n        isChannelStarred: !prevState.isChannelStarred\n      }), () => this.starChannel());\n    };\n\n    this.starChannel = () => {\n      if (this.state.isChannelStarred) {\n        this.state.usersRef.child(`${this.state.user.uid}/starred`).update({\n          [this.state.channel.id]: {\n            name: this.state.channel.name,\n            details: this.state.channel.details,\n            createdBy: {\n              name: this.state.channel.createdBy.name,\n              avatar: this.state.channel.createdBy.avatar\n            }\n          }\n        });\n      } else {\n        this.state.usersRef.child(`${this.state.user.uid}/starred`).child(this.state.channel.id).remove(err => {\n          if (err !== null) {\n            console.error(err);\n          }\n        });\n      }\n    };\n\n    this.handleSearchChange = event => {\n      this.setState({\n        searchTerm: event.target.value,\n        searchLoading: true\n      }, () => this.handleSearchMessages());\n    };\n\n    this.handleSearchMessages = () => {\n      const channelMessages = [...this.state.messages];\n      const regex = new RegExp(this.state.searchTerm, \"gi\");\n      const searchResults = channelMessages.reduce((acc, message) => {\n        if (message.content && message.content.match(regex) || message.user.name.match(regex)) {\n          acc.push(message);\n        }\n\n        return acc;\n      }, []);\n      this.setState({\n        searchResults\n      });\n      setTimeout(() => this.setState({\n        searchLoading: false\n      }), 1000);\n    };\n\n    this.countUniqueUsers = messages => {\n      const uniqueUsers = messages.reduce((acc, message) => {\n        if (!acc.includes(message.user.name)) {\n          acc.push(message.user.name);\n        }\n\n        return acc;\n      }, []);\n      const plural = uniqueUsers.length > 1 || uniqueUsers.length === 0;\n      const numUniqueUsers = `${uniqueUsers.length} user${plural ? \"s\" : \"\"}`;\n      this.setState({\n        numUniqueUsers\n      });\n    };\n\n    this.countUserPosts = messages => {\n      let userPosts = messages.reduce((acc, message) => {\n        if (message.user.name in acc) {\n          acc[message.user.name].count += 1;\n        } else {\n          acc[message.user.name] = {\n            avatar: message.user.avatar,\n            count: 1\n          };\n        }\n\n        return acc;\n      }, {});\n      this.props.setUserPosts(userPosts);\n    };\n\n    this.displayMessages = messages => messages.length > 0 && messages.map(message => /*#__PURE__*/_jsxDEV(Message, {\n      message: message,\n      user: this.state.user\n    }, message.timestamp, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this));\n\n    this.displayChannelName = channel => {\n      return channel ? `${this.state.privateChannel ? \"@\" : \"#\"}${channel.name}` : \"\";\n    };\n\n    this.displayTypingUsers = users => users.length > 0 && users.map(user => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\",\n        marginBottom: \"0.2em\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"user__typing\",\n        children: [user.name, \" is typing\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(Typing, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 69\n      }, this)]\n    }, user.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this));\n\n    this.displayMessageSkeleton = loading => {\n      loading ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [...Array(10)].map((_, i) => /*#__PURE__*/_jsxDEV(Skeleton, {}, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 7\n      }, this) : null;\n    };\n  }\n\n  componentDidMount() {\n    const {\n      channel,\n      user,\n      listeners\n    } = this.state;\n\n    if (channel && user) {\n      this.removeListeners(listeners);\n      this.addListeners(channel.id);\n      this.addUserStarsListener(channel.id, user.uid);\n    }\n  }\n\n  componentWillUnmount() {\n    this.removeListeners(this.state.listeners);\n    this.state.connectedRef.off();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.messagesEnd) {\n      this.scrollToBottom();\n    }\n  }\n\n  render() {\n    // prettier-ignore\n    const {\n      messagesRef,\n      messages,\n      channel,\n      user,\n      numUniqueUsers,\n      searchTerm,\n      searchResults,\n      searchLoading,\n      privateChannel,\n      isChannelStarred,\n      typingUsers,\n      messagesLoading\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MessagesHeader, {\n        channelName: this.displayChannelName(channel),\n        numUniqueUsers: numUniqueUsers,\n        handleSearchChange: this.handleSearchChange,\n        searchLoading: searchLoading,\n        isPrivateChannel: privateChannel,\n        handleStar: this.handleStar,\n        isChannelStarred: isChannelStarred\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Segment, {\n        children: /*#__PURE__*/_jsxDEV(Comment.Group, {\n          className: \"messages\",\n          children: [this.displayMessageSkeleton(messagesLoading), searchTerm ? this.displayMessages(searchResults) : this.displayMessages(messages), this.displayTypingUsers(typingUsers), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: node => this.messagesEnd = node\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageForm, {\n        messagesRef: messagesRef,\n        currentChannel: channel,\n        currentUser: user,\n        isPrivateChannel: privateChannel,\n        getMessagesRef: this.getMessagesRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default connect(null, {\n  setUserPosts\n})(Messages);","map":{"version":3,"sources":["C:/Users/BIRAJ/Desktop/react-slack-clone/src/components/Messages/Messages.js"],"names":["React","Segment","Comment","connect","setUserPosts","firebase","MessagesHeader","MessageForm","Message","Typing","Skeleton","Messages","Component","state","privateChannel","props","isPrivateChannel","privateMessagesRef","database","ref","messagesRef","messages","messagesLoading","channel","currentChannel","isChannelStarred","user","currentUser","usersRef","numUniqueUsers","searchTerm","searchLoading","searchResults","typingRef","typingUsers","connectedRef","listeners","addToListeners","id","event","index","findIndex","listener","newListener","setState","concat","removeListeners","forEach","child","off","scrollToBottom","messagesEnd","scrollIntoView","behaviour","addListeners","channelId","addMessageListener","addTypingListeners","on","snap","key","uid","name","val","filter","onDisconnect","remove","err","console","error","loadedMessages","getMessagesRef","push","countUniqueUsers","countUserPosts","addUserStarsListener","userId","once","then","data","channelIds","Object","keys","prevStarred","includes","handleStar","prevState","starChannel","update","details","createdBy","avatar","handleSearchChange","target","value","handleSearchMessages","channelMessages","regex","RegExp","reduce","acc","message","content","match","setTimeout","uniqueUsers","plural","length","userPosts","count","displayMessages","map","timestamp","displayChannelName","displayTypingUsers","users","display","alignItems","marginBottom","displayMessageSkeleton","loading","Array","_","i","componentDidMount","componentWillUnmount","componentDidUpdate","prevProps","render","node"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Segment, Comment } from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\nimport { setUserPosts } from \"../../actions\";\nimport firebase from \"../../firebase\";\n\nimport MessagesHeader from \"./MessagesHeader\";\nimport MessageForm from \"./MessageForm\";\nimport Message from \"./Message\";\nimport Typing from \"./Typing\";\nimport Skeleton from \"./skeleton\";\n\nclass Messages extends React.Component {\n  state = {\n    privateChannel: this.props.isPrivateChannel,\n    privateMessagesRef: firebase.database().ref(\"privateMessages\"),\n    messagesRef: firebase.database().ref(\"messages\"),\n    messages: [],\n    messagesLoading: true,\n    channel: this.props.currentChannel,\n    isChannelStarred: false,\n    user: this.props.currentUser,\n    usersRef: firebase.database().ref(\"users\"),\n    numUniqueUsers: \"\",\n    searchTerm: \"\",\n    searchLoading: false,\n    searchResults: [],\n    typingRef: firebase.database().ref(\"typing\"),\n    typingUsers: [],\n    connectedRef: firebase.database().ref(\".info/connected\"),\n    listeners: []\n  };\n\n  componentDidMount() {\n    const { channel, user, listeners } = this.state;\n\n    if (channel && user) {\n      this.removeListeners(listeners)\n      this.addListeners(channel.id);\n      this.addUserStarsListener(channel.id, user.uid);\n    }\n  }\n\n  addToListeners = (id, ref, event) => {\n    const index = this.state.listeners.findIndex(listeners => {\n      return listeners.id === id && listener.ref === ref && listener.event === \n      event;\n    })\n\n    if(index === -1){\n      const newListener = {id, ref, event}\n      this.setState({ listeners: this.state.listeners.concat(newListener) });\n    }\n  }\n\n  componentWillUnmount() {\n    this.removeListeners(this.state.listeners);\n    this.state.connectedRef.off();\n  }\n\n  removeListeners = listeners => {\n    listeners.forEach(listener => {\n      listener.ref.child(listener.id).off(listener.event);\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.messagesEnd) {\n      this.scrollToBottom();\n    }\n  }\n\n  scrollToBottom = () => {\n    this.messagesEnd.scrollIntoView({behaviour: \"smooth\"});\n  }\n\n  addListeners = channelId => {\n    this.addMessageListener(channelId);\n    this.addTypingListeners(channelId);\n  };\n\n  addTypingListeners = channelId => {\n    let typingUsers = [];\n    this.state.typingRef.child(channelId).on(\"child_added\", snap => {\n      if (snap.key !== this.state.user.uid) {\n        typingUsers = typingUsers.concat({\n          id: snap.key,\n          name: snap.val()\n        });\n        this.setState({ typingUsers });\n      }\n    });\n\n    this.addListeners(channelId, this.state.typingRef, \"child_added\");\n\n    this.state.typingRef.child(channelId).on(\"child_removed\", snap => {\n      const index = typingUsers.findIndex(user => user.id === snap.key);\n      if (index !== -1) {\n        typingUsers = typingUsers.filter(user => user.id !== snap.key);\n        this.setState({ typingUsers });\n      }\n    });\n\n    this.addListeners(channelId, this.state.typingRef, \"child_removed\");\n\n    this.state.connectedRef.on(\"value\", snap => {\n      if (snap.val() === true) {\n        this.state.typingRef\n          .child(channelId)\n          .child(this.state.user.uid)\n          .onDisconnect()\n          .remove(err => {\n            if (err !== null) {\n              console.error(err);\n            }\n          });\n      }\n    });\n  };\n\n  addMessageListener = channelId => {\n    let loadedMessages = [];\n    const ref = this.getMessagesRef();\n    ref.child(channelId).on(\"child_added\", snap => {\n      loadedMessages.push(snap.val());\n      this.setState({\n        messages: loadedMessages,\n        messagesLoading: false\n      });\n      this.countUniqueUsers(loadedMessages);\n      this.countUserPosts(loadedMessages);\n    });\n    this.addToListeners(channelId, ref, \"child_added\");\n  };\n\n  addUserStarsListener = (channelId, userId) => {\n    this.state.usersRef\n      .child(userId)\n      .child(\"starred\")\n      .once(\"value\")\n      .then(data => {\n        if (data.val() !== null) {\n          const channelIds = Object.keys(data.val());\n          const prevStarred = channelIds.includes(channelId);\n          this.setState({ isChannelStarred: prevStarred });\n        }\n      });\n  };\n\n  getMessagesRef = () => {\n    const { messagesRef, privateMessagesRef, privateChannel } = this.state;\n    return privateChannel ? privateMessagesRef : messagesRef;\n  };\n\n  handleStar = () => {\n    this.setState(\n      prevState => ({\n        isChannelStarred: !prevState.isChannelStarred\n      }),\n      () => this.starChannel()\n    );\n  };\n\n  starChannel = () => {\n    if (this.state.isChannelStarred) {\n      this.state.usersRef.child(`${this.state.user.uid}/starred`).update({\n        [this.state.channel.id]: {\n          name: this.state.channel.name,\n          details: this.state.channel.details,\n          createdBy: {\n            name: this.state.channel.createdBy.name,\n            avatar: this.state.channel.createdBy.avatar\n          }\n        }\n      });\n    } else {\n      this.state.usersRef\n        .child(`${this.state.user.uid}/starred`)\n        .child(this.state.channel.id)\n        .remove(err => {\n          if (err !== null) {\n            console.error(err);\n          }\n        });\n    }\n  };\n\n  handleSearchChange = event => {\n    this.setState(\n      {\n        searchTerm: event.target.value,\n        searchLoading: true\n      },\n      () => this.handleSearchMessages()\n    );\n  };\n\n  handleSearchMessages = () => {\n    const channelMessages = [...this.state.messages];\n    const regex = new RegExp(this.state.searchTerm, \"gi\");\n    const searchResults = channelMessages.reduce((acc, message) => {\n      if (\n        (message.content && message.content.match(regex)) ||\n        message.user.name.match(regex)\n      ) {\n        acc.push(message);\n      }\n      return acc;\n    }, []);\n    this.setState({ searchResults });\n    setTimeout(() => this.setState({ searchLoading: false }), 1000);\n  };\n\n  countUniqueUsers = messages => {\n    const uniqueUsers = messages.reduce((acc, message) => {\n      if (!acc.includes(message.user.name)) {\n        acc.push(message.user.name);\n      }\n      return acc;\n    }, []);\n    const plural = uniqueUsers.length > 1 || uniqueUsers.length === 0;\n    const numUniqueUsers = `${uniqueUsers.length} user${plural ? \"s\" : \"\"}`;\n    this.setState({ numUniqueUsers });\n  };\n\n  countUserPosts = messages => {\n    let userPosts = messages.reduce((acc, message) => {\n      if (message.user.name in acc) {\n        acc[message.user.name].count += 1;\n      } else {\n        acc[message.user.name] = {\n          avatar: message.user.avatar,\n          count: 1\n        };\n      }\n      return acc;\n    }, {});\n    this.props.setUserPosts(userPosts);\n  };\n\n  displayMessages = messages =>\n    messages.length > 0 &&\n    messages.map(message => (\n      <Message\n        key={message.timestamp}\n        message={message}\n        user={this.state.user}\n      />\n    ));\n\n  displayChannelName = channel => {\n    return channel\n      ? `${this.state.privateChannel ? \"@\" : \"#\"}${channel.name}`\n      : \"\";\n  };\n\n  displayTypingUsers = users =>\n    users.length > 0 &&\n    users.map(user => (\n      <div\n        style={{ display: \"flex\", alignItems: \"center\", marginBottom: \"0.2em\" }}\n        key={user.id}\n      >\n        <span className=\"user__typing\">{user.name} is typing</span> <Typing />\n      </div>\n    ));\n\n  displayMessageSkeleton = loading => {\n    loading ? (\n      <React.Fragment>\n        {[...Array(10)].map((_, i) => (\n          <Skeleton key={i}/>\n        ))}\n      </React.Fragment>\n    ) : null;\n  };\n\n  render() {\n    // prettier-ignore\n    const { messagesRef, messages, channel, user, numUniqueUsers, searchTerm, searchResults, \n    searchLoading, privateChannel, isChannelStarred, typingUsers, messagesLoading } \n    = this.state;\n\n    return (\n      <React.Fragment>\n        <MessagesHeader\n          channelName={this.displayChannelName(channel)}\n          numUniqueUsers={numUniqueUsers}\n          handleSearchChange={this.handleSearchChange}\n          searchLoading={searchLoading}\n          isPrivateChannel={privateChannel}\n          handleStar={this.handleStar}\n          isChannelStarred={isChannelStarred}\n        />\n\n        <Segment>\n          <Comment.Group className=\"messages\">\n            {this.displayMessageSkeleton(messagesLoading)}\n            {searchTerm\n              ? this.displayMessages(searchResults)\n              : this.displayMessages(messages)}\n            {this.displayTypingUsers(typingUsers)}\n            <div ref={node => (this.messagesEnd = node)}></div>\n          </Comment.Group>\n        </Segment>\n\n        <MessageForm\n          messagesRef={messagesRef}\n          currentChannel={channel}\n          currentUser={user}\n          isPrivateChannel={privateChannel}\n          getMessagesRef={this.getMessagesRef}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  { setUserPosts }\n)(Messages);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BIRAJ\\\\Desktop\\\\react-slack-clone\\\\src\\\\components\\\\ColorPanel\\\\ColorPanel.js\";\nimport React from \"react\";\nimport firebase from \"../../firebase\";\nimport { connect } from \"react-redux\";\nimport { setColors } from \"../../actions\"; // prettier-ignore\n\nimport { Sidebar, Menu, Divider, Button, Modal, Icon, Label, Segment } from \"semantic-ui-react\";\nimport { SliderPicker } from \"react-color\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ColorPanel extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      modal: false,\n      primary: \"\",\n      secondary: \"\",\n      user: this.props.currentUser,\n      usersRef: firebase.database().ref(\"users\"),\n      userColors: []\n    };\n\n    this.addListener = userId => {\n      let userColors = [];\n      this.state.usersRef.child(`${userId}/colors`).on(\"child_added\", snap => {\n        userColors.unshift(snap.val());\n        console.log(userColors);\n        this.setState({\n          userColors\n        });\n      });\n    };\n\n    this.handleChangePrimary = color => this.setState({\n      primary: color.hex\n    });\n\n    this.handleChangeSecondary = color => this.setState({\n      secondary: color.hex\n    });\n\n    this.handleSaveColors = () => {\n      if (this.state.primary && this.state.secondary) {\n        this.saveColors(this.state.primary, this.state.secondary);\n      }\n    };\n\n    this.saveColors = (primary, secondary) => {\n      this.state.usersRef.child(`${this.state.user.uid}/colors`).push().update({\n        primary,\n        secondary\n      }).then(() => {\n        console.log(\"Colors added\");\n        this.closeModal();\n      }).catch(err => console.error(err));\n    };\n\n    this.openModal = () => this.setState({\n      modal: true\n    });\n\n    this.closeModal = () => this.setState({\n      modal: false\n    });\n\n    this.displayUserColors = colors => {\n      colors.length > 0 && colors.map((color, i) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"color__container\",\n          onClick: () => this.props.setColors(color.primary, color.secondary),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"color__square\",\n            style: {\n              background: color.primary\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"color__overlay\",\n              style: {\n                background: color.secondary\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }, this));\n    };\n  }\n\n  componentDidMount() {\n    if (this.state.user) {\n      this.addListener(this.state.user.uid);\n    }\n  }\n\n  render() {\n    const {\n      modal,\n      primary,\n      secondary,\n      userColors\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Sidebar, {\n      as: Menu,\n      icon: \"labeled\",\n      inverted: true,\n      vertical: true,\n      visible: true,\n      width: \"very thin\",\n      children: [/*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        icon: \"add\",\n        size: \"small\",\n        color: \"blue\",\n        onClick: this.openModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), this.displayUserColors(userColors), /*#__PURE__*/_jsxDEV(Modal, {\n        basic: true,\n        open: modal,\n        onClose: this.closeModal,\n        children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n          children: \"Choose App Colors\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Content, {\n          children: [/*#__PURE__*/_jsxDEV(Segment, {\n            inverted: true,\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              content: \"Primary Color\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(SliderPicker, {\n              color: primary,\n              onChange: this.handleChangePrimary\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Segment, {\n            inverted: true,\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              content: \"Secondary Color\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(SliderPicker, {\n              color: secondary,\n              onChange: this.handleChangeSecondary\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Actions, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            color: \"green\",\n            inverted: true,\n            onClick: this.handleSaveColors,\n            children: [/*#__PURE__*/_jsxDEV(Icon, {\n              name: \"checkmark\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 15\n            }, this), \" Save Colors\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            color: \"red\",\n            inverted: true,\n            onClick: this.closeModal,\n            children: [/*#__PURE__*/_jsxDEV(Icon, {\n              name: \"remove\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 15\n            }, this), \" Cancel\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default connect(null, {\n  setColors\n})(ColorPanel);","map":{"version":3,"sources":["C:/Users/BIRAJ/Desktop/react-slack-clone/src/components/ColorPanel/ColorPanel.js"],"names":["React","firebase","connect","setColors","Sidebar","Menu","Divider","Button","Modal","Icon","Label","Segment","SliderPicker","ColorPanel","Component","state","modal","primary","secondary","user","props","currentUser","usersRef","database","ref","userColors","addListener","userId","child","on","snap","unshift","val","console","log","setState","handleChangePrimary","color","hex","handleChangeSecondary","handleSaveColors","saveColors","uid","push","update","then","closeModal","catch","err","error","openModal","displayUserColors","colors","length","map","i","background","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport firebase from \"../../firebase\";\nimport { connect } from \"react-redux\";\nimport { setColors } from \"../../actions\";\n\n// prettier-ignore\nimport { Sidebar, Menu, Divider, Button, Modal, Icon, Label, Segment } from \"semantic-ui-react\";\nimport { SliderPicker } from \"react-color\";\n\nclass ColorPanel extends React.Component {\n  state = {\n    modal: false,\n    primary: \"\",\n    secondary: \"\",\n    user: this.props.currentUser,\n    usersRef: firebase.database().ref(\"users\"),\n    userColors: []\n  };\n\n  componentDidMount() {\n    if(this.state.user) {\n      this.addListener(this.state.user.uid);\n    }\n  }\n\n  addListener = userId => {\n    let userColors = [];\n    this.state.usersRef\n      .child(`${userId}/colors`)\n      .on(\"child_added\", snap => {\n        userColors.unshift(snap.val());\n        console.log(userColors);\n        this.setState({ userColors });\n      });\n  };\n\n  handleChangePrimary = color => this.setState({ primary: color.hex });\n\n  handleChangeSecondary = color => this.setState({ secondary: color.hex });\n\n  handleSaveColors = () => {\n    if (this.state.primary && this.state.secondary) {\n      this.saveColors(this.state.primary, this.state.secondary);\n    }\n  };\n\n  saveColors = (primary, secondary) => {\n    this.state.usersRef\n      .child(`${this.state.user.uid}/colors`)\n      .push()\n      .update({\n        primary,\n        secondary\n      })\n      .then(() => {\n        console.log(\"Colors added\");\n        this.closeModal();\n      })\n      .catch(err => console.error(err));\n  };\n\n  openModal = () => this.setState({ modal: true });\n\n  closeModal = () => this.setState({ modal: false });\n\n  displayUserColors = colors => {\n    colors.length > 0 && colors.map ((color, i) => (\n      <React.Fragment key={i}>\n        <Divider />\n        <div \n          className=\"color__container\" \n          onClick={() => this.props.setColors(color.primary, color.secondary)}\n        >\n          <div \n            className=\"color__square\" \n            style={{ background: color.primary }}\n          >\n            <div \n              className=\"color__overlay\" \n              style={{ background: color.secondary }}\n            >\n\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    ))\n  }\n\n  render() {\n    const { modal, primary, secondary, userColors } = this.state;\n\n    return (\n      <Sidebar\n        as={Menu}\n        icon=\"labeled\"\n        inverted\n        vertical\n        visible\n        width=\"very thin\"\n      >\n        <Divider />\n        <Button icon=\"add\" size=\"small\" color=\"blue\" onClick={this.openModal} />\n        {this.displayUserColors(userColors)}\n\n        {/* Color Picker Modal */}\n        <Modal basic open={modal} onClose={this.closeModal}>\n          <Modal.Header>Choose App Colors</Modal.Header>\n          <Modal.Content>\n            <Segment inverted>\n              <Label content=\"Primary Color\" />\n              <SliderPicker\n                color={primary}\n                onChange={this.handleChangePrimary}\n              />\n            </Segment>\n\n            <Segment inverted>\n              <Label content=\"Secondary Color\" />\n              <SliderPicker\n                color={secondary}\n                onChange={this.handleChangeSecondary}\n              />\n            </Segment>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button color=\"green\" inverted onClick={this.handleSaveColors}>\n              <Icon name=\"checkmark\" /> Save Colors\n            </Button>\n            <Button color=\"red\" inverted onClick={this.closeModal}>\n              <Icon name=\"remove\" /> Cancel\n            </Button>\n          </Modal.Actions>\n        </Modal>\n      </Sidebar>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  { setColors }\n  )(ColorPanel);\n"]},"metadata":{},"sourceType":"module"}
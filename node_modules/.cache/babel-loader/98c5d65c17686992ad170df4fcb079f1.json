{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BIRAJ\\\\Desktop\\\\react-slack-clone\\\\src\\\\components\\\\SidePanel\\\\Channels.js\";\nimport React from \"react\";\nimport firebase from \"../../firebase\";\nimport { connect } from \"react-redux\";\nimport { setCurrentChannel, setPrivateChannel } from \"../../actions\";\nimport { Menu, Icon, Modal, Form, Input, Button, Label } from \"semantic-ui-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Channels extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      activeChannel: \"\",\n      user: this.props.currentUser,\n      channel: null,\n      channels: [],\n      channelName: \"\",\n      channelDetails: \"\",\n      channelsRef: firebase.database().ref(\"channels\"),\n      messagesRef: firebase.database().ref(\"messages\"),\n      notifications: [],\n      modal: false,\n      firstLoad: true\n    };\n\n    this.addListeners = () => {\n      let loadedChannels = [];\n      this.state.channelsRef.on(\"child_added\", snap => {\n        loadedChannels.push(snap.val());\n        this.setState({\n          channels: loadedChannels\n        }, () => this.setFirstChannel());\n        this.addNotificationListener(snap.key);\n      });\n    };\n\n    this.addNotificationListener = channelId => {\n      this.state.messagesRef.child(channelId).on(\"value\", snap => {\n        if (this.state.channel) {\n          this.handleNotifications(channelId, this.state.channel.id, this.state.notifications, snap);\n        }\n      });\n    };\n\n    this.handleNotifications = (channelId, currentChannelId, notifications, snap) => {\n      let lastTotal = 0;\n      let index = notifications.findIndex(notification => notification.id === channelId);\n\n      if (index !== -1) {\n        if (channelId !== currentChannelId) {\n          lastTotal = notifications[index].total;\n\n          if (snap.numChildren() - lastTotal > 0) {\n            notifications[index].count = snap.numChildren() - lastTotal;\n          }\n        }\n\n        notifications[index].lastKnownTotal = snap.numChildren();\n      } else {\n        notifications.push({\n          id: channelId,\n          total: snap.numChildren(),\n          lastKnownTotal: snap.numChildren(),\n          count: 0\n        });\n      }\n\n      this.setState({\n        notifications\n      });\n    };\n\n    this.removeListeners = () => {\n      this.state.channelsRef.off();\n    };\n\n    this.setFirstChannel = () => {\n      const firstChannel = this.state.channels[0];\n\n      if (this.state.firstLoad && this.state.channels.length > 0) {\n        this.props.setCurrentChannel(firstChannel);\n        this.setActiveChannel(firstChannel);\n        this.setState({\n          channel: firstChannel\n        });\n      }\n\n      this.setState({\n        firstLoad: false\n      });\n    };\n\n    this.addChannel = () => {\n      const {\n        channelsRef,\n        channelName,\n        channelDetails,\n        user\n      } = this.state;\n      const key = channelsRef.push().key;\n      const newChannel = {\n        id: key,\n        name: channelName,\n        details: channelDetails,\n        createdBy: {\n          name: user.displayName,\n          avatar: user.photoURL\n        }\n      };\n      channelsRef.child(key).update(newChannel).then(() => {\n        this.setState({\n          channelName: \"\",\n          channelDetails: \"\"\n        });\n        this.closeModal();\n        console.log(\"channel added\");\n      }).catch(err => {\n        console.error(err);\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n\n      if (this.isFormValid(this.state)) {\n        this.addChannel();\n      }\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.changeChannel = channel => {\n      this.setActiveChannel(channel);\n      this.clearNotifications();\n      this.props.setCurrentChannel(channel);\n      this.props.setPrivateChannel(false);\n      this.setState({\n        channel\n      });\n    };\n\n    this.clearNotifications = () => {\n      let index = this.state.notifications.findIndex(notification => notification.id === this.state.channel.id);\n\n      if (index !== -1) {\n        let updatedNotifications = [...this.state.notifications];\n        updatedNotifications[index].total = this.state.notifications[index].lastKnownTotal;\n        updatedNotifications[index].count = 0;\n        this.setState({\n          notifications: updatedNotifications\n        });\n      }\n    };\n\n    this.setActiveChannel = channel => {\n      this.setState({\n        activeChannel: channel.id\n      });\n    };\n\n    this.getNotificationCount = channel => {\n      let count = 0;\n      this.state.notifications.forEach(notification => {\n        if (notification.id === channel.id) {\n          count = notification.count;\n        }\n      });\n      if (count > 0) return count;\n    };\n\n    this.displayChannels = channels => channels.length > 0 && channels.map(channel => /*#__PURE__*/_jsxDEV(Menu.Item, {\n      onClick: () => this.changeChannel(channel),\n      name: channel.name,\n      style: {\n        opacity: 0.7\n      },\n      active: channel.id === this.state.activeChannel,\n      children: [this.getNotificationCount(channel) && /*#__PURE__*/_jsxDEV(Label, {\n        color: \"red\",\n        children: this.getNotificationCount(channel)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this), \"# \", channel.name]\n    }, channel.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this));\n\n    this.isFormValid = ({\n      channelName,\n      channelDetails\n    }) => channelName && channelDetails;\n\n    this.openModal = () => this.setState({\n      modal: true\n    });\n\n    this.closeModal = () => this.setState({\n      modal: false\n    });\n  }\n\n  componentDidMount() {\n    this.addListeners();\n  }\n\n  componentWillUnmount() {\n    this.removeListeners();\n  }\n\n  render() {\n    const {\n      channels,\n      modal\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Menu.Menu, {\n        className: \"menu\",\n        children: [/*#__PURE__*/_jsxDEV(Menu.Item, {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(Icon, {\n              name: \"exchange\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 15\n            }, this), \" CHANNELS\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 13\n          }, this), \" \", \"(\", channels.length, \") \", /*#__PURE__*/_jsxDEV(Icon, {\n            name: \"add\",\n            onClick: this.openModal\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this), this.displayChannels(channels)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        basic: true,\n        open: modal,\n        onClose: this.closeModal,\n        children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n          children: \"Add a Channel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Content, {\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            onSubmit: this.handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n              children: /*#__PURE__*/_jsxDEV(Input, {\n                fluid: true,\n                label: \"Name of Channel\",\n                name: \"channelName\",\n                onChange: this.handleChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n              children: /*#__PURE__*/_jsxDEV(Input, {\n                fluid: true,\n                label: \"About the Channel\",\n                name: \"channelDetails\",\n                onChange: this.handleChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 234,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Actions, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            color: \"green\",\n            inverted: true,\n            onClick: this.handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(Icon, {\n              name: \"checkmark\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 15\n            }, this), \" Add\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            color: \"red\",\n            inverted: true,\n            onClick: this.closeModal,\n            children: [/*#__PURE__*/_jsxDEV(Icon, {\n              name: \"remove\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 15\n            }, this), \" Cancel\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default connect(null, {\n  setCurrentChannel,\n  setPrivateChannel\n})(Channels);","map":{"version":3,"sources":["C:/Users/BIRAJ/Desktop/react-slack-clone/src/components/SidePanel/Channels.js"],"names":["React","firebase","connect","setCurrentChannel","setPrivateChannel","Menu","Icon","Modal","Form","Input","Button","Label","Channels","Component","state","activeChannel","user","props","currentUser","channel","channels","channelName","channelDetails","channelsRef","database","ref","messagesRef","notifications","modal","firstLoad","addListeners","loadedChannels","on","snap","push","val","setState","setFirstChannel","addNotificationListener","key","channelId","child","handleNotifications","id","currentChannelId","lastTotal","index","findIndex","notification","total","numChildren","count","lastKnownTotal","removeListeners","off","firstChannel","length","setActiveChannel","addChannel","newChannel","name","details","createdBy","displayName","avatar","photoURL","update","then","closeModal","console","log","catch","err","error","handleSubmit","event","preventDefault","isFormValid","handleChange","target","value","changeChannel","clearNotifications","updatedNotifications","getNotificationCount","forEach","displayChannels","map","opacity","openModal","componentDidMount","componentWillUnmount","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport firebase from \"../../firebase\";\nimport { connect } from \"react-redux\";\nimport { setCurrentChannel, setPrivateChannel } from \"../../actions\";\nimport {\n  Menu,\n  Icon,\n  Modal,\n  Form,\n  Input,\n  Button,\n  Label\n} from \"semantic-ui-react\";\n\nclass Channels extends React.Component {\n  state = {\n    activeChannel: \"\",\n    user: this.props.currentUser,\n    channel: null,\n    channels: [],\n    channelName: \"\",\n    channelDetails: \"\",\n    channelsRef: firebase.database().ref(\"channels\"),\n    messagesRef: firebase.database().ref(\"messages\"),\n    notifications: [],\n    modal: false,\n    firstLoad: true\n  };\n\n  componentDidMount() {\n    this.addListeners();\n  }\n\n  componentWillUnmount() {\n    this.removeListeners();\n  }\n\n  addListeners = () => {\n    let loadedChannels = [];\n    this.state.channelsRef.on(\"child_added\", snap => {\n      loadedChannels.push(snap.val());\n      this.setState({ channels: loadedChannels }, () => this.setFirstChannel());\n      this.addNotificationListener(snap.key);\n    });\n  };\n\n  addNotificationListener = channelId => {\n    this.state.messagesRef.child(channelId).on(\"value\", snap => {\n      if (this.state.channel) {\n        this.handleNotifications(\n          channelId,\n          this.state.channel.id,\n          this.state.notifications,\n          snap\n        );\n      }\n    });\n  };\n\n  handleNotifications = (channelId, currentChannelId, notifications, snap) => {\n    let lastTotal = 0;\n\n    let index = notifications.findIndex(\n      notification => notification.id === channelId\n    );\n\n    if (index !== -1) {\n      if (channelId !== currentChannelId) {\n        lastTotal = notifications[index].total;\n\n        if (snap.numChildren() - lastTotal > 0) {\n          notifications[index].count = snap.numChildren() - lastTotal;\n        }\n      }\n      notifications[index].lastKnownTotal = snap.numChildren();\n    } else {\n      notifications.push({\n        id: channelId,\n        total: snap.numChildren(),\n        lastKnownTotal: snap.numChildren(),\n        count: 0\n      });\n    }\n\n    this.setState({ notifications });\n  };\n\n  removeListeners = () => {\n    this.state.channelsRef.off();\n  };\n\n  setFirstChannel = () => {\n    const firstChannel = this.state.channels[0];\n    if (this.state.firstLoad && this.state.channels.length > 0) {\n      this.props.setCurrentChannel(firstChannel);\n      this.setActiveChannel(firstChannel);\n      this.setState({ channel: firstChannel });\n    }\n    this.setState({ firstLoad: false });\n  };\n\n  addChannel = () => {\n    const { channelsRef, channelName, channelDetails, user } = this.state;\n\n    const key = channelsRef.push().key;\n\n    const newChannel = {\n      id: key,\n      name: channelName,\n      details: channelDetails,\n      createdBy: {\n        name: user.displayName,\n        avatar: user.photoURL\n      }\n    };\n\n    channelsRef\n      .child(key)\n      .update(newChannel)\n      .then(() => {\n        this.setState({ channelName: \"\", channelDetails: \"\" });\n        this.closeModal();\n        console.log(\"channel added\");\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    if (this.isFormValid(this.state)) {\n      this.addChannel();\n    }\n  };\n\n  handleChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  changeChannel = channel => {\n    this.setActiveChannel(channel);\n    this.clearNotifications();\n    this.props.setCurrentChannel(channel);\n    this.props.setPrivateChannel(false);\n    this.setState({ channel });\n  };\n\n  clearNotifications = () => {\n    let index = this.state.notifications.findIndex(\n      notification => notification.id === this.state.channel.id\n    );\n\n    if (index !== -1) {\n      let updatedNotifications = [...this.state.notifications];\n      updatedNotifications[index].total = this.state.notifications[\n        index\n      ].lastKnownTotal;\n      updatedNotifications[index].count = 0;\n      this.setState({ notifications: updatedNotifications });\n    }\n  };\n\n  setActiveChannel = channel => {\n    this.setState({ activeChannel: channel.id });\n  };\n\n  getNotificationCount = channel => {\n    let count = 0;\n\n    this.state.notifications.forEach(notification => {\n      if (notification.id === channel.id) {\n        count = notification.count;\n      }\n    });\n\n    if (count > 0) return count;\n  };\n\n  displayChannels = channels =>\n    channels.length > 0 &&\n    channels.map(channel => (\n      <Menu.Item\n        key={channel.id}\n        onClick={() => this.changeChannel(channel)}\n        name={channel.name}\n        style={{ opacity: 0.7 }}\n        active={channel.id === this.state.activeChannel}\n      >\n        {this.getNotificationCount(channel) && (\n          <Label color=\"red\">{this.getNotificationCount(channel)}</Label>\n        )}\n        # {channel.name}\n      </Menu.Item>\n    ));\n\n  isFormValid = ({ channelName, channelDetails }) =>\n    channelName && channelDetails;\n\n  openModal = () => this.setState({ modal: true });\n\n  closeModal = () => this.setState({ modal: false });\n\n  render() {\n    const { channels, modal } = this.state;\n\n    return (\n      <React.Fragment>\n        <Menu.Menu className=\"menu\">\n          <Menu.Item>\n            <span>\n              <Icon name=\"exchange\" /> CHANNELS\n            </span>{\" \"}\n            ({channels.length}) <Icon name=\"add\" onClick={this.openModal} />\n          </Menu.Item>\n          {this.displayChannels(channels)}\n        </Menu.Menu>\n\n        {/* Add Channel Modal */}\n        <Modal basic open={modal} onClose={this.closeModal}>\n          <Modal.Header>Add a Channel</Modal.Header>\n          <Modal.Content>\n            <Form onSubmit={this.handleSubmit}>\n              <Form.Field>\n                <Input\n                  fluid\n                  label=\"Name of Channel\"\n                  name=\"channelName\"\n                  onChange={this.handleChange}\n                />\n              </Form.Field>\n\n              <Form.Field>\n                <Input\n                  fluid\n                  label=\"About the Channel\"\n                  name=\"channelDetails\"\n                  onChange={this.handleChange}\n                />\n              </Form.Field>\n            </Form>\n          </Modal.Content>\n\n          <Modal.Actions>\n            <Button color=\"green\" inverted onClick={this.handleSubmit}>\n              <Icon name=\"checkmark\" /> Add\n            </Button>\n            <Button color=\"red\" inverted onClick={this.closeModal}>\n              <Icon name=\"remove\" /> Cancel\n            </Button>\n          </Modal.Actions>\n        </Modal>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  { setCurrentChannel, setPrivateChannel }\n)(Channels);\n"]},"metadata":{},"sourceType":"module"}
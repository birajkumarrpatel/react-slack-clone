{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BIRAJ\\\\Desktop\\\\react-slack-clone\\\\src\\\\components\\\\SidePanel\\\\DirectMessages.js\";\nimport React from \"react\";\nimport firebase from \"../../firebase\";\nimport { connect } from \"react-redux\";\nimport { setCurrentChannel, setPrivateChannel } from \"../../actions\";\nimport { Menu, Icon } from \"semantic-ui-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass DirectMessages extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      activeChannel: \"\",\n      user: this.props.currentUser,\n      users: [],\n      usersRef: firebase.database().ref(\"users\"),\n      connectedRef: firebase.database().ref(\".info/connected\"),\n      presenceRef: firebase.database().ref(\"presence\")\n    };\n\n    this.removeListeners = () => {\n      this.state.usersRef.off();\n      this.state.presenceRef.off();\n      this.state.connectedRef.off();\n    };\n\n    this.addListeners = currentUserUid => {\n      let loadedUsers = [];\n      this.state.usersRef.on(\"child_added\", snap => {\n        if (currentUserUid !== snap.key) {\n          let user = snap.val();\n          user[\"uid\"] = snap.key;\n          user[\"status\"] = \"offline\";\n          loadedUsers.push(user);\n          this.setState({\n            users: loadedUsers\n          });\n        }\n      });\n      this.state.connectedRef.on(\"value\", snap => {\n        if (snap.val() === true) {\n          const ref = this.state.presenceRef.child(currentUserUid);\n          ref.set(true);\n          ref.onDisconnect().remove(err => {\n            if (err !== null) {\n              console.error(err);\n            }\n          });\n        }\n      });\n      this.state.presenceRef.on(\"child_added\", snap => {\n        if (currentUserUid !== snap.key) {\n          this.addStatusToUser(snap.key);\n        }\n      });\n      this.state.presenceRef.on(\"child_removed\", snap => {\n        if (currentUserUid !== snap.key) {\n          this.addStatusToUser(snap.key, false);\n        }\n      });\n    };\n\n    this.addStatusToUser = (userId, connected = true) => {\n      const updatedUsers = this.state.users.reduce((acc, user) => {\n        if (user.uid === userId) {\n          user[\"status\"] = `${connected ? \"online\" : \"offline\"}`;\n        }\n\n        return acc.concat(user);\n      }, []);\n      this.setState({\n        users: updatedUsers\n      });\n    };\n\n    this.isUserOnline = user => user.status === \"online\";\n\n    this.changeChannel = user => {\n      const channelId = this.getChannelId(user.uid);\n      const channelData = {\n        id: channelId,\n        name: user.name\n      };\n      this.props.setCurrentChannel(channelData);\n      this.props.setPrivateChannel(true);\n      this.setActiveChannel(user.uid);\n    };\n\n    this.getChannelId = userId => {\n      const currentUserId = this.state.user.uid;\n      return userId < currentUserId ? `${userId}/${currentUserId}` : `${currentUserId}/${userId}`;\n    };\n\n    this.setActiveChannel = userId => {\n      this.setState({\n        activeChannel: userId\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (this.state.user) {\n      this.addListeners(this.state.user.uid);\n    }\n  }\n\n  componentWillUnmount() {\n    this.removeListeners();\n  }\n\n  render() {\n    const {\n      users,\n      activeChannel\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Menu.Menu, {\n      className: \"menu\",\n      children: [/*#__PURE__*/_jsxDEV(Menu.Item, {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(Icon, {\n            name: \"mail\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this), \" DIRECT MESSAGES\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), \" \", \"(\", users.length, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), users.map(user => /*#__PURE__*/_jsxDEV(Menu.Item, {\n        active: user.uid === activeChannel,\n        onClick: () => this.changeChannel(user),\n        style: {\n          opacity: 0.7,\n          fontStyle: \"italic\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Icon, {\n          name: \"circle\",\n          color: this.isUserOnline(user) ? \"green\" : \"red\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this), \"@ \", user.name]\n      }, user.uid, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default connect(null, {\n  setCurrentChannel,\n  setPrivateChannel\n})(DirectMessages);","map":{"version":3,"sources":["C:/Users/BIRAJ/Desktop/react-slack-clone/src/components/SidePanel/DirectMessages.js"],"names":["React","firebase","connect","setCurrentChannel","setPrivateChannel","Menu","Icon","DirectMessages","Component","state","activeChannel","user","props","currentUser","users","usersRef","database","ref","connectedRef","presenceRef","removeListeners","off","addListeners","currentUserUid","loadedUsers","on","snap","key","val","push","setState","child","set","onDisconnect","remove","err","console","error","addStatusToUser","userId","connected","updatedUsers","reduce","acc","uid","concat","isUserOnline","status","changeChannel","channelId","getChannelId","channelData","id","name","setActiveChannel","currentUserId","componentDidMount","componentWillUnmount","render","length","map","opacity","fontStyle"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport firebase from \"../../firebase\";\nimport { connect } from \"react-redux\";\nimport { setCurrentChannel, setPrivateChannel } from \"../../actions\";\nimport { Menu, Icon } from \"semantic-ui-react\";\n\nclass DirectMessages extends React.Component {\n  state = {\n    activeChannel: \"\",\n    user: this.props.currentUser,\n    users: [],\n    usersRef: firebase.database().ref(\"users\"),\n    connectedRef: firebase.database().ref(\".info/connected\"),\n    presenceRef: firebase.database().ref(\"presence\")\n  };\n\n  componentDidMount() {\n    if (this.state.user) {\n      this.addListeners(this.state.user.uid);\n    }\n  }\n\n  componentWillUnmount() {\n    this.removeListeners();\n  }\n\n  removeListeners = () => {\n    this.state.usersRef.off();\n    this.state.presenceRef.off();\n    this.state.connectedRef.off();\n  };\n\n  addListeners = currentUserUid => {\n    let loadedUsers = [];\n    this.state.usersRef.on(\"child_added\", snap => {\n      if (currentUserUid !== snap.key) {\n        let user = snap.val();\n        user[\"uid\"] = snap.key;\n        user[\"status\"] = \"offline\";\n        loadedUsers.push(user);\n        this.setState({ users: loadedUsers });\n      }\n    });\n\n    this.state.connectedRef.on(\"value\", snap => {\n      if (snap.val() === true) {\n        const ref = this.state.presenceRef.child(currentUserUid);\n        ref.set(true);\n        ref.onDisconnect().remove(err => {\n          if (err !== null) {\n            console.error(err);\n          }\n        });\n      }\n    });\n\n    this.state.presenceRef.on(\"child_added\", snap => {\n      if (currentUserUid !== snap.key) {\n        this.addStatusToUser(snap.key);\n      }\n    });\n\n    this.state.presenceRef.on(\"child_removed\", snap => {\n      if (currentUserUid !== snap.key) {\n        this.addStatusToUser(snap.key, false);\n      }\n    });\n  };\n\n  addStatusToUser = (userId, connected = true) => {\n    const updatedUsers = this.state.users.reduce((acc, user) => {\n      if (user.uid === userId) {\n        user[\"status\"] = `${connected ? \"online\" : \"offline\"}`;\n      }\n      return acc.concat(user);\n    }, []);\n    this.setState({ users: updatedUsers });\n  };\n\n  isUserOnline = user => user.status === \"online\";\n\n  changeChannel = user => {\n    const channelId = this.getChannelId(user.uid);\n    const channelData = {\n      id: channelId,\n      name: user.name\n    };\n    this.props.setCurrentChannel(channelData);\n    this.props.setPrivateChannel(true);\n    this.setActiveChannel(user.uid);\n  };\n\n  getChannelId = userId => {\n    const currentUserId = this.state.user.uid;\n    return userId < currentUserId\n      ? `${userId}/${currentUserId}`\n      : `${currentUserId}/${userId}`;\n  };\n\n  setActiveChannel = userId => {\n    this.setState({ activeChannel: userId });\n  };\n\n  render() {\n    const { users, activeChannel } = this.state;\n\n    return (\n      <Menu.Menu className=\"menu\">\n        <Menu.Item>\n          <span>\n            <Icon name=\"mail\" /> DIRECT MESSAGES\n          </span>{\" \"}\n          ({users.length})\n        </Menu.Item>\n        {users.map(user => (\n          <Menu.Item\n            key={user.uid}\n            active={user.uid === activeChannel}\n            onClick={() => this.changeChannel(user)}\n            style={{ opacity: 0.7, fontStyle: \"italic\" }}\n          >\n            <Icon\n              name=\"circle\"\n              color={this.isUserOnline(user) ? \"green\" : \"red\"}\n            />\n            @ {user.name}\n          </Menu.Item>\n        ))}\n      </Menu.Menu>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  { setCurrentChannel, setPrivateChannel }\n)(DirectMessages);\n"]},"metadata":{},"sourceType":"module"}